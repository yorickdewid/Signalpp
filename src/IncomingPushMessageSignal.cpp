// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IncomingPushMessageSignal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IncomingPushMessageSignal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace textsecure {

namespace {

const ::google::protobuf::Descriptor* Envelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Envelope_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Envelope_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Content_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataMessage_Flags_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SyncMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncMessage_Sent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncMessage_Sent_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncMessage_Contacts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncMessage_Contacts_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncMessage_Groups_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncMessage_Groups_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncMessage_Blocked_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncMessage_Blocked_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncMessage_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncMessage_Request_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SyncMessage_Request_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SyncMessage_Read_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncMessage_Read_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttachmentPointer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttachmentPointer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupContext_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupContext_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Avatar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Avatar_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactDetails_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_IncomingPushMessageSignal_2eproto() {
  protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "IncomingPushMessageSignal.proto");
  GOOGLE_CHECK(file != NULL);
  Envelope_descriptor_ = file->message_type(0);
  static const int Envelope_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, sourcedevice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, relay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, legacymessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, content_),
  };
  Envelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Envelope_descriptor_,
      Envelope::default_instance_,
      Envelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Envelope));
  Envelope_Type_descriptor_ = Envelope_descriptor_->enum_type(0);
  Content_descriptor_ = file->message_type(1);
  static const int Content_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, datamessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, syncmessage_),
  };
  Content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Content_descriptor_,
      Content::default_instance_,
      Content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Content));
  DataMessage_descriptor_ = file->message_type(2);
  static const int DataMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, attachments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, expiretimer_),
  };
  DataMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataMessage_descriptor_,
      DataMessage::default_instance_,
      DataMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataMessage));
  DataMessage_Flags_descriptor_ = DataMessage_descriptor_->enum_type(0);
  SyncMessage_descriptor_ = file->message_type(3);
  static const int SyncMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage, sent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage, contacts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage, groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage, read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage, blocked_),
  };
  SyncMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncMessage_descriptor_,
      SyncMessage::default_instance_,
      SyncMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncMessage));
  SyncMessage_Sent_descriptor_ = SyncMessage_descriptor_->nested_type(0);
  static const int SyncMessage_Sent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Sent, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Sent, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Sent, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Sent, expirationstarttimestamp_),
  };
  SyncMessage_Sent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncMessage_Sent_descriptor_,
      SyncMessage_Sent::default_instance_,
      SyncMessage_Sent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Sent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Sent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncMessage_Sent));
  SyncMessage_Contacts_descriptor_ = SyncMessage_descriptor_->nested_type(1);
  static const int SyncMessage_Contacts_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Contacts, blob_),
  };
  SyncMessage_Contacts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncMessage_Contacts_descriptor_,
      SyncMessage_Contacts::default_instance_,
      SyncMessage_Contacts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Contacts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Contacts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncMessage_Contacts));
  SyncMessage_Groups_descriptor_ = SyncMessage_descriptor_->nested_type(2);
  static const int SyncMessage_Groups_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Groups, blob_),
  };
  SyncMessage_Groups_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncMessage_Groups_descriptor_,
      SyncMessage_Groups::default_instance_,
      SyncMessage_Groups_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Groups, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Groups, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncMessage_Groups));
  SyncMessage_Blocked_descriptor_ = SyncMessage_descriptor_->nested_type(3);
  static const int SyncMessage_Blocked_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Blocked, numbers_),
  };
  SyncMessage_Blocked_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncMessage_Blocked_descriptor_,
      SyncMessage_Blocked::default_instance_,
      SyncMessage_Blocked_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Blocked, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Blocked, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncMessage_Blocked));
  SyncMessage_Request_descriptor_ = SyncMessage_descriptor_->nested_type(4);
  static const int SyncMessage_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Request, type_),
  };
  SyncMessage_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncMessage_Request_descriptor_,
      SyncMessage_Request::default_instance_,
      SyncMessage_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncMessage_Request));
  SyncMessage_Request_Type_descriptor_ = SyncMessage_Request_descriptor_->enum_type(0);
  SyncMessage_Read_descriptor_ = SyncMessage_descriptor_->nested_type(5);
  static const int SyncMessage_Read_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Read, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Read, timestamp_),
  };
  SyncMessage_Read_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncMessage_Read_descriptor_,
      SyncMessage_Read::default_instance_,
      SyncMessage_Read_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Read, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMessage_Read, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncMessage_Read));
  AttachmentPointer_descriptor_ = file->message_type(4);
  static const int AttachmentPointer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachmentPointer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachmentPointer, contenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachmentPointer, key_),
  };
  AttachmentPointer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttachmentPointer_descriptor_,
      AttachmentPointer::default_instance_,
      AttachmentPointer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachmentPointer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachmentPointer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttachmentPointer));
  GroupContext_descriptor_ = file->message_type(5);
  static const int GroupContext_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupContext, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupContext, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupContext, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupContext, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupContext, avatar_),
  };
  GroupContext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupContext_descriptor_,
      GroupContext::default_instance_,
      GroupContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupContext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupContext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupContext));
  GroupContext_Type_descriptor_ = GroupContext_descriptor_->enum_type(0);
  Avatar_descriptor_ = file->message_type(6);
  static const int Avatar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar, contenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar, length_),
  };
  Avatar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Avatar_descriptor_,
      Avatar::default_instance_,
      Avatar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Avatar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Avatar));
  GroupDetails_descriptor_ = file->message_type(7);
  static const int GroupDetails_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDetails, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDetails, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDetails, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDetails, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDetails, active_),
  };
  GroupDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupDetails_descriptor_,
      GroupDetails::default_instance_,
      GroupDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupDetails));
  ContactDetails_descriptor_ = file->message_type(8);
  static const int ContactDetails_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactDetails, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactDetails, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactDetails, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactDetails, color_),
  };
  ContactDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactDetails_descriptor_,
      ContactDetails::default_instance_,
      ContactDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactDetails));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_IncomingPushMessageSignal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Envelope_descriptor_, &Envelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Content_descriptor_, &Content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataMessage_descriptor_, &DataMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncMessage_descriptor_, &SyncMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncMessage_Sent_descriptor_, &SyncMessage_Sent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncMessage_Contacts_descriptor_, &SyncMessage_Contacts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncMessage_Groups_descriptor_, &SyncMessage_Groups::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncMessage_Blocked_descriptor_, &SyncMessage_Blocked::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncMessage_Request_descriptor_, &SyncMessage_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncMessage_Read_descriptor_, &SyncMessage_Read::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttachmentPointer_descriptor_, &AttachmentPointer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupContext_descriptor_, &GroupContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Avatar_descriptor_, &Avatar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupDetails_descriptor_, &GroupDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactDetails_descriptor_, &ContactDetails::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_IncomingPushMessageSignal_2eproto() {
  delete Envelope::default_instance_;
  delete Envelope_reflection_;
  delete Content::default_instance_;
  delete Content_reflection_;
  delete DataMessage::default_instance_;
  delete DataMessage_reflection_;
  delete SyncMessage::default_instance_;
  delete SyncMessage_reflection_;
  delete SyncMessage_Sent::default_instance_;
  delete SyncMessage_Sent_reflection_;
  delete SyncMessage_Contacts::default_instance_;
  delete SyncMessage_Contacts_reflection_;
  delete SyncMessage_Groups::default_instance_;
  delete SyncMessage_Groups_reflection_;
  delete SyncMessage_Blocked::default_instance_;
  delete SyncMessage_Blocked_reflection_;
  delete SyncMessage_Request::default_instance_;
  delete SyncMessage_Request_reflection_;
  delete SyncMessage_Read::default_instance_;
  delete SyncMessage_Read_reflection_;
  delete AttachmentPointer::default_instance_;
  delete AttachmentPointer_reflection_;
  delete GroupContext::default_instance_;
  delete GroupContext_reflection_;
  delete Avatar::default_instance_;
  delete Avatar_reflection_;
  delete GroupDetails::default_instance_;
  delete GroupDetails_reflection_;
  delete ContactDetails::default_instance_;
  delete ContactDetails_reflection_;
}

void protobuf_AddDesc_IncomingPushMessageSignal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037IncomingPushMessageSignal.proto\022\ntexts"
    "ecure\"\372\001\n\010Envelope\022\'\n\004type\030\001 \001(\0162\031.texts"
    "ecure.Envelope.Type\022\016\n\006source\030\002 \001(\t\022\024\n\014s"
    "ourceDevice\030\007 \001(\r\022\r\n\005relay\030\003 \001(\t\022\021\n\ttime"
    "stamp\030\005 \001(\004\022\025\n\rlegacyMessage\030\006 \001(\014\022\017\n\007co"
    "ntent\030\010 \001(\014\"U\n\004Type\022\013\n\007UNKNOWN\020\000\022\016\n\nCIPH"
    "ERTEXT\020\001\022\020\n\014KEY_EXCHANGE\020\002\022\021\n\rPREKEY_BUN"
    "DLE\020\003\022\013\n\007RECEIPT\020\005\"e\n\007Content\022,\n\013dataMes"
    "sage\030\001 \001(\0132\027.textsecure.DataMessage\022,\n\013s"
    "yncMessage\030\002 \001(\0132\027.textsecure.SyncMessag"
    "e\"\323\001\n\013DataMessage\022\014\n\004body\030\001 \001(\t\0222\n\013attac"
    "hments\030\002 \003(\0132\035.textsecure.AttachmentPoin"
    "ter\022\'\n\005group\030\003 \001(\0132\030.textsecure.GroupCon"
    "text\022\r\n\005flags\030\004 \001(\r\022\023\n\013expireTimer\030\005 \001(\r"
    "\"5\n\005Flags\022\017\n\013END_SESSION\020\001\022\033\n\027EXPIRATION"
    "_TIMER_UPDATE\020\002\"\333\005\n\013SyncMessage\022*\n\004sent\030"
    "\001 \001(\0132\034.textsecure.SyncMessage.Sent\0222\n\010c"
    "ontacts\030\002 \001(\0132 .textsecure.SyncMessage.C"
    "ontacts\022.\n\006groups\030\003 \001(\0132\036.textsecure.Syn"
    "cMessage.Groups\0220\n\007request\030\004 \001(\0132\037.texts"
    "ecure.SyncMessage.Request\022*\n\004read\030\005 \003(\0132"
    "\034.textsecure.SyncMessage.Read\0220\n\007blocked"
    "\030\006 \001(\0132\037.textsecure.SyncMessage.Blocked\032"
    "z\n\004Sent\022\023\n\013destination\030\001 \001(\t\022\021\n\ttimestam"
    "p\030\002 \001(\004\022(\n\007message\030\003 \001(\0132\027.textsecure.Da"
    "taMessage\022 \n\030expirationStartTimestamp\030\004 "
    "\001(\004\0327\n\010Contacts\022+\n\004blob\030\001 \001(\0132\035.textsecu"
    "re.AttachmentPointer\0325\n\006Groups\022+\n\004blob\030\001"
    " \001(\0132\035.textsecure.AttachmentPointer\032\032\n\007B"
    "locked\022\017\n\007numbers\030\001 \003(\t\032y\n\007Request\0222\n\004ty"
    "pe\030\001 \001(\0162$.textsecure.SyncMessage.Reques"
    "t.Type\":\n\004Type\022\013\n\007UNKNOWN\020\000\022\014\n\010CONTACTS\020"
    "\001\022\n\n\006GROUPS\020\002\022\013\n\007BLOCKED\020\003\032)\n\004Read\022\016\n\006se"
    "nder\030\001 \001(\t\022\021\n\ttimestamp\030\002 \001(\004\"A\n\021Attachm"
    "entPointer\022\n\n\002id\030\001 \001(\006\022\023\n\013contentType\030\002 "
    "\001(\t\022\013\n\003key\030\003 \001(\014\"\315\001\n\014GroupContext\022\n\n\002id\030"
    "\001 \001(\014\022+\n\004type\030\002 \001(\0162\035.textsecure.GroupCo"
    "ntext.Type\022\014\n\004name\030\003 \001(\t\022\017\n\007members\030\004 \003("
    "\t\022-\n\006avatar\030\005 \001(\0132\035.textsecure.Attachmen"
    "tPointer\"6\n\004Type\022\013\n\007UNKNOWN\020\000\022\n\n\006UPDATE\020"
    "\001\022\013\n\007DELIVER\020\002\022\010\n\004QUIT\020\003\"-\n\006Avatar\022\023\n\013co"
    "ntentType\030\001 \001(\t\022\016\n\006length\030\002 \001(\r\"s\n\014Group"
    "Details\022\n\n\002id\030\001 \001(\014\022\014\n\004name\030\002 \001(\t\022\017\n\007mem"
    "bers\030\003 \003(\t\022\"\n\006avatar\030\004 \001(\0132\022.textsecure."
    "Avatar\022\024\n\006active\030\005 \001(\010:\004true\"a\n\016ContactD"
    "etails\022\016\n\006number\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\"\n\006"
    "avatar\030\003 \001(\0132\022.textsecure.Avatar\022\r\n\005colo"
    "r\030\004 \001(\t", 1887);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IncomingPushMessageSignal.proto", &protobuf_RegisterTypes);
  Envelope::default_instance_ = new Envelope();
  Content::default_instance_ = new Content();
  DataMessage::default_instance_ = new DataMessage();
  SyncMessage::default_instance_ = new SyncMessage();
  SyncMessage_Sent::default_instance_ = new SyncMessage_Sent();
  SyncMessage_Contacts::default_instance_ = new SyncMessage_Contacts();
  SyncMessage_Groups::default_instance_ = new SyncMessage_Groups();
  SyncMessage_Blocked::default_instance_ = new SyncMessage_Blocked();
  SyncMessage_Request::default_instance_ = new SyncMessage_Request();
  SyncMessage_Read::default_instance_ = new SyncMessage_Read();
  AttachmentPointer::default_instance_ = new AttachmentPointer();
  GroupContext::default_instance_ = new GroupContext();
  Avatar::default_instance_ = new Avatar();
  GroupDetails::default_instance_ = new GroupDetails();
  ContactDetails::default_instance_ = new ContactDetails();
  Envelope::default_instance_->InitAsDefaultInstance();
  Content::default_instance_->InitAsDefaultInstance();
  DataMessage::default_instance_->InitAsDefaultInstance();
  SyncMessage::default_instance_->InitAsDefaultInstance();
  SyncMessage_Sent::default_instance_->InitAsDefaultInstance();
  SyncMessage_Contacts::default_instance_->InitAsDefaultInstance();
  SyncMessage_Groups::default_instance_->InitAsDefaultInstance();
  SyncMessage_Blocked::default_instance_->InitAsDefaultInstance();
  SyncMessage_Request::default_instance_->InitAsDefaultInstance();
  SyncMessage_Read::default_instance_->InitAsDefaultInstance();
  AttachmentPointer::default_instance_->InitAsDefaultInstance();
  GroupContext::default_instance_->InitAsDefaultInstance();
  Avatar::default_instance_->InitAsDefaultInstance();
  GroupDetails::default_instance_->InitAsDefaultInstance();
  ContactDetails::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IncomingPushMessageSignal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IncomingPushMessageSignal_2eproto {
  StaticDescriptorInitializer_IncomingPushMessageSignal_2eproto() {
    protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  }
} static_descriptor_initializer_IncomingPushMessageSignal_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Envelope_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Envelope_Type_descriptor_;
}
bool Envelope_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Envelope_Type Envelope::UNKNOWN;
const Envelope_Type Envelope::CIPHERTEXT;
const Envelope_Type Envelope::KEY_EXCHANGE;
const Envelope_Type Envelope::PREKEY_BUNDLE;
const Envelope_Type Envelope::RECEIPT;
const Envelope_Type Envelope::Type_MIN;
const Envelope_Type Envelope::Type_MAX;
const int Envelope::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Envelope::kTypeFieldNumber;
const int Envelope::kSourceFieldNumber;
const int Envelope::kSourceDeviceFieldNumber;
const int Envelope::kRelayFieldNumber;
const int Envelope::kTimestampFieldNumber;
const int Envelope::kLegacyMessageFieldNumber;
const int Envelope::kContentFieldNumber;
#endif  // !_MSC_VER

Envelope::Envelope()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:textsecure.Envelope)
}

void Envelope::InitAsDefaultInstance() {
}

Envelope::Envelope(const Envelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:textsecure.Envelope)
}

void Envelope::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourcedevice_ = 0u;
  relay_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_ULONGLONG(0);
  legacymessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Envelope::~Envelope() {
  // @@protoc_insertion_point(destructor:textsecure.Envelope)
  SharedDtor();
}

void Envelope::SharedDtor() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (relay_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relay_;
  }
  if (legacymessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete legacymessage_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void Envelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Envelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Envelope_descriptor_;
}

const Envelope& Envelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  return *default_instance_;
}

Envelope* Envelope::default_instance_ = NULL;

Envelope* Envelope::New() const {
  return new Envelope;
}

void Envelope::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Envelope*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(type_, sourcedevice_);
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
    if (has_relay()) {
      if (relay_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        relay_->clear();
      }
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_legacymessage()) {
      if (legacymessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        legacymessage_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Envelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:textsecure.Envelope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .textsecure.Envelope.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::textsecure::Envelope_Type_IsValid(value)) {
            set_type(static_cast< ::textsecure::Envelope_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_source;
        break;
      }

      // optional string source = 2;
      case 2: {
        if (tag == 18) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_relay;
        break;
      }

      // optional string relay = 3;
      case 3: {
        if (tag == 26) {
         parse_relay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relay()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->relay().data(), this->relay().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "relay");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 5;
      case 5: {
        if (tag == 40) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_legacyMessage;
        break;
      }

      // optional bytes legacyMessage = 6;
      case 6: {
        if (tag == 50) {
         parse_legacyMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_legacymessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sourceDevice;
        break;
      }

      // optional uint32 sourceDevice = 7;
      case 7: {
        if (tag == 56) {
         parse_sourceDevice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourcedevice_)));
          set_has_sourcedevice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_content;
        break;
      }

      // optional bytes content = 8;
      case 8: {
        if (tag == 66) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:textsecure.Envelope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:textsecure.Envelope)
  return false;
#undef DO_
}

void Envelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:textsecure.Envelope)
  // optional .textsecure.Envelope.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string source = 2;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source(), output);
  }

  // optional string relay = 3;
  if (has_relay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relay().data(), this->relay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "relay");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->relay(), output);
  }

  // optional uint64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  // optional bytes legacyMessage = 6;
  if (has_legacymessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->legacymessage(), output);
  }

  // optional uint32 sourceDevice = 7;
  if (has_sourcedevice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sourcedevice(), output);
  }

  // optional bytes content = 8;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:textsecure.Envelope)
}

::google::protobuf::uint8* Envelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:textsecure.Envelope)
  // optional .textsecure.Envelope.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string source = 2;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source(), target);
  }

  // optional string relay = 3;
  if (has_relay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relay().data(), this->relay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "relay");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->relay(), target);
  }

  // optional uint64 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  // optional bytes legacyMessage = 6;
  if (has_legacymessage()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->legacymessage(), target);
  }

  // optional uint32 sourceDevice = 7;
  if (has_sourcedevice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sourcedevice(), target);
  }

  // optional bytes content = 8;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textsecure.Envelope)
  return target;
}

int Envelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .textsecure.Envelope.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string source = 2;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional uint32 sourceDevice = 7;
    if (has_sourcedevice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourcedevice());
    }

    // optional string relay = 3;
    if (has_relay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relay());
    }

    // optional uint64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional bytes legacyMessage = 6;
    if (has_legacymessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->legacymessage());
    }

    // optional bytes content = 8;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Envelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Envelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Envelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Envelope::MergeFrom(const Envelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_sourcedevice()) {
      set_sourcedevice(from.sourcedevice());
    }
    if (from.has_relay()) {
      set_relay(from.relay());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_legacymessage()) {
      set_legacymessage(from.legacymessage());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Envelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Envelope::CopyFrom(const Envelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Envelope::IsInitialized() const {

  return true;
}

void Envelope::Swap(Envelope* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(source_, other->source_);
    std::swap(sourcedevice_, other->sourcedevice_);
    std::swap(relay_, other->relay_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(legacymessage_, other->legacymessage_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Envelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Envelope_descriptor_;
  metadata.reflection = Envelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Content::kDataMessageFieldNumber;
const int Content::kSyncMessageFieldNumber;
#endif  // !_MSC_VER

Content::Content()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:textsecure.Content)
}

void Content::InitAsDefaultInstance() {
  datamessage_ = const_cast< ::textsecure::DataMessage*>(&::textsecure::DataMessage::default_instance());
  syncmessage_ = const_cast< ::textsecure::SyncMessage*>(&::textsecure::SyncMessage::default_instance());
}

Content::Content(const Content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:textsecure.Content)
}

void Content::SharedCtor() {
  _cached_size_ = 0;
  datamessage_ = NULL;
  syncmessage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Content::~Content() {
  // @@protoc_insertion_point(destructor:textsecure.Content)
  SharedDtor();
}

void Content::SharedDtor() {
  if (this != default_instance_) {
    delete datamessage_;
    delete syncmessage_;
  }
}

void Content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Content_descriptor_;
}

const Content& Content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  return *default_instance_;
}

Content* Content::default_instance_ = NULL;

Content* Content::New() const {
  return new Content;
}

void Content::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_datamessage()) {
      if (datamessage_ != NULL) datamessage_->::textsecure::DataMessage::Clear();
    }
    if (has_syncmessage()) {
      if (syncmessage_ != NULL) syncmessage_->::textsecure::SyncMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:textsecure.Content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .textsecure.DataMessage dataMessage = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_datamessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_syncMessage;
        break;
      }

      // optional .textsecure.SyncMessage syncMessage = 2;
      case 2: {
        if (tag == 18) {
         parse_syncMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syncmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:textsecure.Content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:textsecure.Content)
  return false;
#undef DO_
}

void Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:textsecure.Content)
  // optional .textsecure.DataMessage dataMessage = 1;
  if (has_datamessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datamessage(), output);
  }

  // optional .textsecure.SyncMessage syncMessage = 2;
  if (has_syncmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->syncmessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:textsecure.Content)
}

::google::protobuf::uint8* Content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:textsecure.Content)
  // optional .textsecure.DataMessage dataMessage = 1;
  if (has_datamessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datamessage(), target);
  }

  // optional .textsecure.SyncMessage syncMessage = 2;
  if (has_syncmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->syncmessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textsecure.Content)
  return target;
}

int Content::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .textsecure.DataMessage dataMessage = 1;
    if (has_datamessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datamessage());
    }

    // optional .textsecure.SyncMessage syncMessage = 2;
    if (has_syncmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syncmessage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Content::MergeFrom(const Content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datamessage()) {
      mutable_datamessage()->::textsecure::DataMessage::MergeFrom(from.datamessage());
    }
    if (from.has_syncmessage()) {
      mutable_syncmessage()->::textsecure::SyncMessage::MergeFrom(from.syncmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Content::CopyFrom(const Content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Content::IsInitialized() const {

  return true;
}

void Content::Swap(Content* other) {
  if (other != this) {
    std::swap(datamessage_, other->datamessage_);
    std::swap(syncmessage_, other->syncmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Content_descriptor_;
  metadata.reflection = Content_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DataMessage_Flags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataMessage_Flags_descriptor_;
}
bool DataMessage_Flags_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DataMessage_Flags DataMessage::END_SESSION;
const DataMessage_Flags DataMessage::EXPIRATION_TIMER_UPDATE;
const DataMessage_Flags DataMessage::Flags_MIN;
const DataMessage_Flags DataMessage::Flags_MAX;
const int DataMessage::Flags_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DataMessage::kBodyFieldNumber;
const int DataMessage::kAttachmentsFieldNumber;
const int DataMessage::kGroupFieldNumber;
const int DataMessage::kFlagsFieldNumber;
const int DataMessage::kExpireTimerFieldNumber;
#endif  // !_MSC_VER

DataMessage::DataMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:textsecure.DataMessage)
}

void DataMessage::InitAsDefaultInstance() {
  group_ = const_cast< ::textsecure::GroupContext*>(&::textsecure::GroupContext::default_instance());
}

DataMessage::DataMessage(const DataMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:textsecure.DataMessage)
}

void DataMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_ = NULL;
  flags_ = 0u;
  expiretimer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataMessage::~DataMessage() {
  // @@protoc_insertion_point(destructor:textsecure.DataMessage)
  SharedDtor();
}

void DataMessage::SharedDtor() {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (this != default_instance_) {
    delete group_;
  }
}

void DataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataMessage_descriptor_;
}

const DataMessage& DataMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  return *default_instance_;
}

DataMessage* DataMessage::default_instance_ = NULL;

DataMessage* DataMessage::New() const {
  return new DataMessage;
}

void DataMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DataMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 29) {
    ZR_(flags_, expiretimer_);
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        body_->clear();
      }
    }
    if (has_group()) {
      if (group_ != NULL) group_->::textsecure::GroupContext::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attachments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:textsecure.DataMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string body = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->body().data(), this->body().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "body");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attachments;
        break;
      }

      // repeated .textsecure.AttachmentPointer attachments = 2;
      case 2: {
        if (tag == 18) {
         parse_attachments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attachments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attachments;
        if (input->ExpectTag(26)) goto parse_group;
        break;
      }

      // optional .textsecure.GroupContext group = 3;
      case 3: {
        if (tag == 26) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 4;
      case 4: {
        if (tag == 32) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_expireTimer;
        break;
      }

      // optional uint32 expireTimer = 5;
      case 5: {
        if (tag == 40) {
         parse_expireTimer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiretimer_)));
          set_has_expiretimer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:textsecure.DataMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:textsecure.DataMessage)
  return false;
#undef DO_
}

void DataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:textsecure.DataMessage)
  // optional string body = 1;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->body(), output);
  }

  // repeated .textsecure.AttachmentPointer attachments = 2;
  for (int i = 0; i < this->attachments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attachments(i), output);
  }

  // optional .textsecure.GroupContext group = 3;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->group(), output);
  }

  // optional uint32 flags = 4;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flags(), output);
  }

  // optional uint32 expireTimer = 5;
  if (has_expiretimer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->expiretimer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:textsecure.DataMessage)
}

::google::protobuf::uint8* DataMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:textsecure.DataMessage)
  // optional string body = 1;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->body(), target);
  }

  // repeated .textsecure.AttachmentPointer attachments = 2;
  for (int i = 0; i < this->attachments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attachments(i), target);
  }

  // optional .textsecure.GroupContext group = 3;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->group(), target);
  }

  // optional uint32 flags = 4;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flags(), target);
  }

  // optional uint32 expireTimer = 5;
  if (has_expiretimer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->expiretimer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textsecure.DataMessage)
  return target;
}

int DataMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string body = 1;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body());
    }

    // optional .textsecure.GroupContext group = 3;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group());
    }

    // optional uint32 flags = 4;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 expireTimer = 5;
    if (has_expiretimer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expiretimer());
    }

  }
  // repeated .textsecure.AttachmentPointer attachments = 2;
  total_size += 1 * this->attachments_size();
  for (int i = 0; i < this->attachments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attachments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataMessage::MergeFrom(const DataMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  attachments_.MergeFrom(from.attachments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_group()) {
      mutable_group()->::textsecure::GroupContext::MergeFrom(from.group());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_expiretimer()) {
      set_expiretimer(from.expiretimer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataMessage::CopyFrom(const DataMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMessage::IsInitialized() const {

  return true;
}

void DataMessage::Swap(DataMessage* other) {
  if (other != this) {
    std::swap(body_, other->body_);
    attachments_.Swap(&other->attachments_);
    std::swap(group_, other->group_);
    std::swap(flags_, other->flags_);
    std::swap(expiretimer_, other->expiretimer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataMessage_descriptor_;
  metadata.reflection = DataMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncMessage_Sent::kDestinationFieldNumber;
const int SyncMessage_Sent::kTimestampFieldNumber;
const int SyncMessage_Sent::kMessageFieldNumber;
const int SyncMessage_Sent::kExpirationStartTimestampFieldNumber;
#endif  // !_MSC_VER

SyncMessage_Sent::SyncMessage_Sent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:textsecure.SyncMessage.Sent)
}

void SyncMessage_Sent::InitAsDefaultInstance() {
  message_ = const_cast< ::textsecure::DataMessage*>(&::textsecure::DataMessage::default_instance());
}

SyncMessage_Sent::SyncMessage_Sent(const SyncMessage_Sent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:textsecure.SyncMessage.Sent)
}

void SyncMessage_Sent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_ULONGLONG(0);
  message_ = NULL;
  expirationstarttimestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncMessage_Sent::~SyncMessage_Sent() {
  // @@protoc_insertion_point(destructor:textsecure.SyncMessage.Sent)
  SharedDtor();
}

void SyncMessage_Sent::SharedDtor() {
  if (destination_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete destination_;
  }
  if (this != default_instance_) {
    delete message_;
  }
}

void SyncMessage_Sent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncMessage_Sent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncMessage_Sent_descriptor_;
}

const SyncMessage_Sent& SyncMessage_Sent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  return *default_instance_;
}

SyncMessage_Sent* SyncMessage_Sent::default_instance_ = NULL;

SyncMessage_Sent* SyncMessage_Sent::New() const {
  return new SyncMessage_Sent;
}

void SyncMessage_Sent::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_destination()) {
      if (destination_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        destination_->clear();
      }
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_message()) {
      if (message_ != NULL) message_->::textsecure::DataMessage::Clear();
    }
    expirationstarttimestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncMessage_Sent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:textsecure.SyncMessage.Sent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string destination = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destination().data(), this->destination().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "destination");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional .textsecure.DataMessage message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_expirationStartTimestamp;
        break;
      }

      // optional uint64 expirationStartTimestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_expirationStartTimestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expirationstarttimestamp_)));
          set_has_expirationstarttimestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:textsecure.SyncMessage.Sent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:textsecure.SyncMessage.Sent)
  return false;
#undef DO_
}

void SyncMessage_Sent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:textsecure.SyncMessage.Sent)
  // optional string destination = 1;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "destination");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->destination(), output);
  }

  // optional uint64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // optional .textsecure.DataMessage message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->message(), output);
  }

  // optional uint64 expirationStartTimestamp = 4;
  if (has_expirationstarttimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->expirationstarttimestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:textsecure.SyncMessage.Sent)
}

::google::protobuf::uint8* SyncMessage_Sent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:textsecure.SyncMessage.Sent)
  // optional string destination = 1;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "destination");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->destination(), target);
  }

  // optional uint64 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // optional .textsecure.DataMessage message = 3;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->message(), target);
  }

  // optional uint64 expirationStartTimestamp = 4;
  if (has_expirationstarttimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->expirationstarttimestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textsecure.SyncMessage.Sent)
  return target;
}

int SyncMessage_Sent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string destination = 1;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination());
    }

    // optional uint64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional .textsecure.DataMessage message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }

    // optional uint64 expirationStartTimestamp = 4;
    if (has_expirationstarttimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expirationstarttimestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncMessage_Sent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncMessage_Sent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncMessage_Sent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncMessage_Sent::MergeFrom(const SyncMessage_Sent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_destination()) {
      set_destination(from.destination());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_message()) {
      mutable_message()->::textsecure::DataMessage::MergeFrom(from.message());
    }
    if (from.has_expirationstarttimestamp()) {
      set_expirationstarttimestamp(from.expirationstarttimestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncMessage_Sent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncMessage_Sent::CopyFrom(const SyncMessage_Sent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncMessage_Sent::IsInitialized() const {

  return true;
}

void SyncMessage_Sent::Swap(SyncMessage_Sent* other) {
  if (other != this) {
    std::swap(destination_, other->destination_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(message_, other->message_);
    std::swap(expirationstarttimestamp_, other->expirationstarttimestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncMessage_Sent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncMessage_Sent_descriptor_;
  metadata.reflection = SyncMessage_Sent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SyncMessage_Contacts::kBlobFieldNumber;
#endif  // !_MSC_VER

SyncMessage_Contacts::SyncMessage_Contacts()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:textsecure.SyncMessage.Contacts)
}

void SyncMessage_Contacts::InitAsDefaultInstance() {
  blob_ = const_cast< ::textsecure::AttachmentPointer*>(&::textsecure::AttachmentPointer::default_instance());
}

SyncMessage_Contacts::SyncMessage_Contacts(const SyncMessage_Contacts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:textsecure.SyncMessage.Contacts)
}

void SyncMessage_Contacts::SharedCtor() {
  _cached_size_ = 0;
  blob_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncMessage_Contacts::~SyncMessage_Contacts() {
  // @@protoc_insertion_point(destructor:textsecure.SyncMessage.Contacts)
  SharedDtor();
}

void SyncMessage_Contacts::SharedDtor() {
  if (this != default_instance_) {
    delete blob_;
  }
}

void SyncMessage_Contacts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncMessage_Contacts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncMessage_Contacts_descriptor_;
}

const SyncMessage_Contacts& SyncMessage_Contacts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  return *default_instance_;
}

SyncMessage_Contacts* SyncMessage_Contacts::default_instance_ = NULL;

SyncMessage_Contacts* SyncMessage_Contacts::New() const {
  return new SyncMessage_Contacts;
}

void SyncMessage_Contacts::Clear() {
  if (has_blob()) {
    if (blob_ != NULL) blob_->::textsecure::AttachmentPointer::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncMessage_Contacts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:textsecure.SyncMessage.Contacts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .textsecure.AttachmentPointer blob = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blob()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:textsecure.SyncMessage.Contacts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:textsecure.SyncMessage.Contacts)
  return false;
#undef DO_
}

void SyncMessage_Contacts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:textsecure.SyncMessage.Contacts)
  // optional .textsecure.AttachmentPointer blob = 1;
  if (has_blob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:textsecure.SyncMessage.Contacts)
}

::google::protobuf::uint8* SyncMessage_Contacts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:textsecure.SyncMessage.Contacts)
  // optional .textsecure.AttachmentPointer blob = 1;
  if (has_blob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textsecure.SyncMessage.Contacts)
  return target;
}

int SyncMessage_Contacts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .textsecure.AttachmentPointer blob = 1;
    if (has_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncMessage_Contacts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncMessage_Contacts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncMessage_Contacts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncMessage_Contacts::MergeFrom(const SyncMessage_Contacts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blob()) {
      mutable_blob()->::textsecure::AttachmentPointer::MergeFrom(from.blob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncMessage_Contacts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncMessage_Contacts::CopyFrom(const SyncMessage_Contacts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncMessage_Contacts::IsInitialized() const {

  return true;
}

void SyncMessage_Contacts::Swap(SyncMessage_Contacts* other) {
  if (other != this) {
    std::swap(blob_, other->blob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncMessage_Contacts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncMessage_Contacts_descriptor_;
  metadata.reflection = SyncMessage_Contacts_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SyncMessage_Groups::kBlobFieldNumber;
#endif  // !_MSC_VER

SyncMessage_Groups::SyncMessage_Groups()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:textsecure.SyncMessage.Groups)
}

void SyncMessage_Groups::InitAsDefaultInstance() {
  blob_ = const_cast< ::textsecure::AttachmentPointer*>(&::textsecure::AttachmentPointer::default_instance());
}

SyncMessage_Groups::SyncMessage_Groups(const SyncMessage_Groups& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:textsecure.SyncMessage.Groups)
}

void SyncMessage_Groups::SharedCtor() {
  _cached_size_ = 0;
  blob_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncMessage_Groups::~SyncMessage_Groups() {
  // @@protoc_insertion_point(destructor:textsecure.SyncMessage.Groups)
  SharedDtor();
}

void SyncMessage_Groups::SharedDtor() {
  if (this != default_instance_) {
    delete blob_;
  }
}

void SyncMessage_Groups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncMessage_Groups::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncMessage_Groups_descriptor_;
}

const SyncMessage_Groups& SyncMessage_Groups::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  return *default_instance_;
}

SyncMessage_Groups* SyncMessage_Groups::default_instance_ = NULL;

SyncMessage_Groups* SyncMessage_Groups::New() const {
  return new SyncMessage_Groups;
}

void SyncMessage_Groups::Clear() {
  if (has_blob()) {
    if (blob_ != NULL) blob_->::textsecure::AttachmentPointer::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncMessage_Groups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:textsecure.SyncMessage.Groups)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .textsecure.AttachmentPointer blob = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blob()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:textsecure.SyncMessage.Groups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:textsecure.SyncMessage.Groups)
  return false;
#undef DO_
}

void SyncMessage_Groups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:textsecure.SyncMessage.Groups)
  // optional .textsecure.AttachmentPointer blob = 1;
  if (has_blob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:textsecure.SyncMessage.Groups)
}

::google::protobuf::uint8* SyncMessage_Groups::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:textsecure.SyncMessage.Groups)
  // optional .textsecure.AttachmentPointer blob = 1;
  if (has_blob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textsecure.SyncMessage.Groups)
  return target;
}

int SyncMessage_Groups::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .textsecure.AttachmentPointer blob = 1;
    if (has_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncMessage_Groups::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncMessage_Groups* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncMessage_Groups*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncMessage_Groups::MergeFrom(const SyncMessage_Groups& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blob()) {
      mutable_blob()->::textsecure::AttachmentPointer::MergeFrom(from.blob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncMessage_Groups::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncMessage_Groups::CopyFrom(const SyncMessage_Groups& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncMessage_Groups::IsInitialized() const {

  return true;
}

void SyncMessage_Groups::Swap(SyncMessage_Groups* other) {
  if (other != this) {
    std::swap(blob_, other->blob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncMessage_Groups::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncMessage_Groups_descriptor_;
  metadata.reflection = SyncMessage_Groups_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SyncMessage_Blocked::kNumbersFieldNumber;
#endif  // !_MSC_VER

SyncMessage_Blocked::SyncMessage_Blocked()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:textsecure.SyncMessage.Blocked)
}

void SyncMessage_Blocked::InitAsDefaultInstance() {
}

SyncMessage_Blocked::SyncMessage_Blocked(const SyncMessage_Blocked& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:textsecure.SyncMessage.Blocked)
}

void SyncMessage_Blocked::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncMessage_Blocked::~SyncMessage_Blocked() {
  // @@protoc_insertion_point(destructor:textsecure.SyncMessage.Blocked)
  SharedDtor();
}

void SyncMessage_Blocked::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncMessage_Blocked::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncMessage_Blocked::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncMessage_Blocked_descriptor_;
}

const SyncMessage_Blocked& SyncMessage_Blocked::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  return *default_instance_;
}

SyncMessage_Blocked* SyncMessage_Blocked::default_instance_ = NULL;

SyncMessage_Blocked* SyncMessage_Blocked::New() const {
  return new SyncMessage_Blocked;
}

void SyncMessage_Blocked::Clear() {
  numbers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncMessage_Blocked::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:textsecure.SyncMessage.Blocked)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string numbers = 1;
      case 1: {
        if (tag == 10) {
         parse_numbers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_numbers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->numbers(this->numbers_size() - 1).data(),
            this->numbers(this->numbers_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "numbers");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_numbers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:textsecure.SyncMessage.Blocked)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:textsecure.SyncMessage.Blocked)
  return false;
#undef DO_
}

void SyncMessage_Blocked::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:textsecure.SyncMessage.Blocked)
  // repeated string numbers = 1;
  for (int i = 0; i < this->numbers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->numbers(i).data(), this->numbers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "numbers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->numbers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:textsecure.SyncMessage.Blocked)
}

::google::protobuf::uint8* SyncMessage_Blocked::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:textsecure.SyncMessage.Blocked)
  // repeated string numbers = 1;
  for (int i = 0; i < this->numbers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->numbers(i).data(), this->numbers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "numbers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->numbers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textsecure.SyncMessage.Blocked)
  return target;
}

int SyncMessage_Blocked::ByteSize() const {
  int total_size = 0;

  // repeated string numbers = 1;
  total_size += 1 * this->numbers_size();
  for (int i = 0; i < this->numbers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->numbers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncMessage_Blocked::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncMessage_Blocked* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncMessage_Blocked*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncMessage_Blocked::MergeFrom(const SyncMessage_Blocked& from) {
  GOOGLE_CHECK_NE(&from, this);
  numbers_.MergeFrom(from.numbers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncMessage_Blocked::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncMessage_Blocked::CopyFrom(const SyncMessage_Blocked& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncMessage_Blocked::IsInitialized() const {

  return true;
}

void SyncMessage_Blocked::Swap(SyncMessage_Blocked* other) {
  if (other != this) {
    numbers_.Swap(&other->numbers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncMessage_Blocked::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncMessage_Blocked_descriptor_;
  metadata.reflection = SyncMessage_Blocked_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* SyncMessage_Request_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncMessage_Request_Type_descriptor_;
}
bool SyncMessage_Request_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SyncMessage_Request_Type SyncMessage_Request::UNKNOWN;
const SyncMessage_Request_Type SyncMessage_Request::CONTACTS;
const SyncMessage_Request_Type SyncMessage_Request::GROUPS;
const SyncMessage_Request_Type SyncMessage_Request::BLOCKED;
const SyncMessage_Request_Type SyncMessage_Request::Type_MIN;
const SyncMessage_Request_Type SyncMessage_Request::Type_MAX;
const int SyncMessage_Request::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SyncMessage_Request::kTypeFieldNumber;
#endif  // !_MSC_VER

SyncMessage_Request::SyncMessage_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:textsecure.SyncMessage.Request)
}

void SyncMessage_Request::InitAsDefaultInstance() {
}

SyncMessage_Request::SyncMessage_Request(const SyncMessage_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:textsecure.SyncMessage.Request)
}

void SyncMessage_Request::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncMessage_Request::~SyncMessage_Request() {
  // @@protoc_insertion_point(destructor:textsecure.SyncMessage.Request)
  SharedDtor();
}

void SyncMessage_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncMessage_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncMessage_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncMessage_Request_descriptor_;
}

const SyncMessage_Request& SyncMessage_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  return *default_instance_;
}

SyncMessage_Request* SyncMessage_Request::default_instance_ = NULL;

SyncMessage_Request* SyncMessage_Request::New() const {
  return new SyncMessage_Request;
}

void SyncMessage_Request::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncMessage_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:textsecure.SyncMessage.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .textsecure.SyncMessage.Request.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::textsecure::SyncMessage_Request_Type_IsValid(value)) {
            set_type(static_cast< ::textsecure::SyncMessage_Request_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:textsecure.SyncMessage.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:textsecure.SyncMessage.Request)
  return false;
#undef DO_
}

void SyncMessage_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:textsecure.SyncMessage.Request)
  // optional .textsecure.SyncMessage.Request.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:textsecure.SyncMessage.Request)
}

::google::protobuf::uint8* SyncMessage_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:textsecure.SyncMessage.Request)
  // optional .textsecure.SyncMessage.Request.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textsecure.SyncMessage.Request)
  return target;
}

int SyncMessage_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .textsecure.SyncMessage.Request.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncMessage_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncMessage_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncMessage_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncMessage_Request::MergeFrom(const SyncMessage_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncMessage_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncMessage_Request::CopyFrom(const SyncMessage_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncMessage_Request::IsInitialized() const {

  return true;
}

void SyncMessage_Request::Swap(SyncMessage_Request* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncMessage_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncMessage_Request_descriptor_;
  metadata.reflection = SyncMessage_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SyncMessage_Read::kSenderFieldNumber;
const int SyncMessage_Read::kTimestampFieldNumber;
#endif  // !_MSC_VER

SyncMessage_Read::SyncMessage_Read()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:textsecure.SyncMessage.Read)
}

void SyncMessage_Read::InitAsDefaultInstance() {
}

SyncMessage_Read::SyncMessage_Read(const SyncMessage_Read& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:textsecure.SyncMessage.Read)
}

void SyncMessage_Read::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncMessage_Read::~SyncMessage_Read() {
  // @@protoc_insertion_point(destructor:textsecure.SyncMessage.Read)
  SharedDtor();
}

void SyncMessage_Read::SharedDtor() {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (this != default_instance_) {
  }
}

void SyncMessage_Read::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncMessage_Read::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncMessage_Read_descriptor_;
}

const SyncMessage_Read& SyncMessage_Read::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  return *default_instance_;
}

SyncMessage_Read* SyncMessage_Read::default_instance_ = NULL;

SyncMessage_Read* SyncMessage_Read::New() const {
  return new SyncMessage_Read;
}

void SyncMessage_Read::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sender_->clear();
      }
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncMessage_Read::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:textsecure.SyncMessage.Read)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sender = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sender");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:textsecure.SyncMessage.Read)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:textsecure.SyncMessage.Read)
  return false;
#undef DO_
}

void SyncMessage_Read::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:textsecure.SyncMessage.Read)
  // optional string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sender(), output);
  }

  // optional uint64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:textsecure.SyncMessage.Read)
}

::google::protobuf::uint8* SyncMessage_Read::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:textsecure.SyncMessage.Read)
  // optional string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sender(), target);
  }

  // optional uint64 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textsecure.SyncMessage.Read)
  return target;
}

int SyncMessage_Read::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // optional uint64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncMessage_Read::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncMessage_Read* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncMessage_Read*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncMessage_Read::MergeFrom(const SyncMessage_Read& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncMessage_Read::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncMessage_Read::CopyFrom(const SyncMessage_Read& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncMessage_Read::IsInitialized() const {

  return true;
}

void SyncMessage_Read::Swap(SyncMessage_Read* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncMessage_Read::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncMessage_Read_descriptor_;
  metadata.reflection = SyncMessage_Read_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SyncMessage::kSentFieldNumber;
const int SyncMessage::kContactsFieldNumber;
const int SyncMessage::kGroupsFieldNumber;
const int SyncMessage::kRequestFieldNumber;
const int SyncMessage::kReadFieldNumber;
const int SyncMessage::kBlockedFieldNumber;
#endif  // !_MSC_VER

SyncMessage::SyncMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:textsecure.SyncMessage)
}

void SyncMessage::InitAsDefaultInstance() {
  sent_ = const_cast< ::textsecure::SyncMessage_Sent*>(&::textsecure::SyncMessage_Sent::default_instance());
  contacts_ = const_cast< ::textsecure::SyncMessage_Contacts*>(&::textsecure::SyncMessage_Contacts::default_instance());
  groups_ = const_cast< ::textsecure::SyncMessage_Groups*>(&::textsecure::SyncMessage_Groups::default_instance());
  request_ = const_cast< ::textsecure::SyncMessage_Request*>(&::textsecure::SyncMessage_Request::default_instance());
  blocked_ = const_cast< ::textsecure::SyncMessage_Blocked*>(&::textsecure::SyncMessage_Blocked::default_instance());
}

SyncMessage::SyncMessage(const SyncMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:textsecure.SyncMessage)
}

void SyncMessage::SharedCtor() {
  _cached_size_ = 0;
  sent_ = NULL;
  contacts_ = NULL;
  groups_ = NULL;
  request_ = NULL;
  blocked_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncMessage::~SyncMessage() {
  // @@protoc_insertion_point(destructor:textsecure.SyncMessage)
  SharedDtor();
}

void SyncMessage::SharedDtor() {
  if (this != default_instance_) {
    delete sent_;
    delete contacts_;
    delete groups_;
    delete request_;
    delete blocked_;
  }
}

void SyncMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncMessage_descriptor_;
}

const SyncMessage& SyncMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  return *default_instance_;
}

SyncMessage* SyncMessage::default_instance_ = NULL;

SyncMessage* SyncMessage::New() const {
  return new SyncMessage;
}

void SyncMessage::Clear() {
  if (_has_bits_[0 / 32] & 47) {
    if (has_sent()) {
      if (sent_ != NULL) sent_->::textsecure::SyncMessage_Sent::Clear();
    }
    if (has_contacts()) {
      if (contacts_ != NULL) contacts_->::textsecure::SyncMessage_Contacts::Clear();
    }
    if (has_groups()) {
      if (groups_ != NULL) groups_->::textsecure::SyncMessage_Groups::Clear();
    }
    if (has_request()) {
      if (request_ != NULL) request_->::textsecure::SyncMessage_Request::Clear();
    }
    if (has_blocked()) {
      if (blocked_ != NULL) blocked_->::textsecure::SyncMessage_Blocked::Clear();
    }
  }
  read_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:textsecure.SyncMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .textsecure.SyncMessage.Sent sent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contacts;
        break;
      }

      // optional .textsecure.SyncMessage.Contacts contacts = 2;
      case 2: {
        if (tag == 18) {
         parse_contacts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contacts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_groups;
        break;
      }

      // optional .textsecure.SyncMessage.Groups groups = 3;
      case 3: {
        if (tag == 26) {
         parse_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_request;
        break;
      }

      // optional .textsecure.SyncMessage.Request request = 4;
      case 4: {
        if (tag == 34) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_read;
        break;
      }

      // repeated .textsecure.SyncMessage.Read read = 5;
      case 5: {
        if (tag == 42) {
         parse_read:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_read()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_read;
        if (input->ExpectTag(50)) goto parse_blocked;
        break;
      }

      // optional .textsecure.SyncMessage.Blocked blocked = 6;
      case 6: {
        if (tag == 50) {
         parse_blocked:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blocked()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:textsecure.SyncMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:textsecure.SyncMessage)
  return false;
#undef DO_
}

void SyncMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:textsecure.SyncMessage)
  // optional .textsecure.SyncMessage.Sent sent = 1;
  if (has_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sent(), output);
  }

  // optional .textsecure.SyncMessage.Contacts contacts = 2;
  if (has_contacts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contacts(), output);
  }

  // optional .textsecure.SyncMessage.Groups groups = 3;
  if (has_groups()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->groups(), output);
  }

  // optional .textsecure.SyncMessage.Request request = 4;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->request(), output);
  }

  // repeated .textsecure.SyncMessage.Read read = 5;
  for (int i = 0; i < this->read_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->read(i), output);
  }

  // optional .textsecure.SyncMessage.Blocked blocked = 6;
  if (has_blocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->blocked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:textsecure.SyncMessage)
}

::google::protobuf::uint8* SyncMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:textsecure.SyncMessage)
  // optional .textsecure.SyncMessage.Sent sent = 1;
  if (has_sent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sent(), target);
  }

  // optional .textsecure.SyncMessage.Contacts contacts = 2;
  if (has_contacts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contacts(), target);
  }

  // optional .textsecure.SyncMessage.Groups groups = 3;
  if (has_groups()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->groups(), target);
  }

  // optional .textsecure.SyncMessage.Request request = 4;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->request(), target);
  }

  // repeated .textsecure.SyncMessage.Read read = 5;
  for (int i = 0; i < this->read_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->read(i), target);
  }

  // optional .textsecure.SyncMessage.Blocked blocked = 6;
  if (has_blocked()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->blocked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textsecure.SyncMessage)
  return target;
}

int SyncMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .textsecure.SyncMessage.Sent sent = 1;
    if (has_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sent());
    }

    // optional .textsecure.SyncMessage.Contacts contacts = 2;
    if (has_contacts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contacts());
    }

    // optional .textsecure.SyncMessage.Groups groups = 3;
    if (has_groups()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groups());
    }

    // optional .textsecure.SyncMessage.Request request = 4;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .textsecure.SyncMessage.Blocked blocked = 6;
    if (has_blocked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blocked());
    }

  }
  // repeated .textsecure.SyncMessage.Read read = 5;
  total_size += 1 * this->read_size();
  for (int i = 0; i < this->read_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->read(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncMessage::MergeFrom(const SyncMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  read_.MergeFrom(from.read_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sent()) {
      mutable_sent()->::textsecure::SyncMessage_Sent::MergeFrom(from.sent());
    }
    if (from.has_contacts()) {
      mutable_contacts()->::textsecure::SyncMessage_Contacts::MergeFrom(from.contacts());
    }
    if (from.has_groups()) {
      mutable_groups()->::textsecure::SyncMessage_Groups::MergeFrom(from.groups());
    }
    if (from.has_request()) {
      mutable_request()->::textsecure::SyncMessage_Request::MergeFrom(from.request());
    }
    if (from.has_blocked()) {
      mutable_blocked()->::textsecure::SyncMessage_Blocked::MergeFrom(from.blocked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncMessage::CopyFrom(const SyncMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncMessage::IsInitialized() const {

  return true;
}

void SyncMessage::Swap(SyncMessage* other) {
  if (other != this) {
    std::swap(sent_, other->sent_);
    std::swap(contacts_, other->contacts_);
    std::swap(groups_, other->groups_);
    std::swap(request_, other->request_);
    read_.Swap(&other->read_);
    std::swap(blocked_, other->blocked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncMessage_descriptor_;
  metadata.reflection = SyncMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttachmentPointer::kIdFieldNumber;
const int AttachmentPointer::kContentTypeFieldNumber;
const int AttachmentPointer::kKeyFieldNumber;
#endif  // !_MSC_VER

AttachmentPointer::AttachmentPointer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:textsecure.AttachmentPointer)
}

void AttachmentPointer::InitAsDefaultInstance() {
}

AttachmentPointer::AttachmentPointer(const AttachmentPointer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:textsecure.AttachmentPointer)
}

void AttachmentPointer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  contenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttachmentPointer::~AttachmentPointer() {
  // @@protoc_insertion_point(destructor:textsecure.AttachmentPointer)
  SharedDtor();
}

void AttachmentPointer::SharedDtor() {
  if (contenttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contenttype_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void AttachmentPointer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttachmentPointer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttachmentPointer_descriptor_;
}

const AttachmentPointer& AttachmentPointer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  return *default_instance_;
}

AttachmentPointer* AttachmentPointer::default_instance_ = NULL;

AttachmentPointer* AttachmentPointer::New() const {
  return new AttachmentPointer;
}

void AttachmentPointer::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_contenttype()) {
      if (contenttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contenttype_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttachmentPointer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:textsecure.AttachmentPointer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contentType;
        break;
      }

      // optional string contentType = 2;
      case 2: {
        if (tag == 18) {
         parse_contentType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contenttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contenttype().data(), this->contenttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contenttype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional bytes key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:textsecure.AttachmentPointer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:textsecure.AttachmentPointer)
  return false;
#undef DO_
}

void AttachmentPointer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:textsecure.AttachmentPointer)
  // optional fixed64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }

  // optional string contentType = 2;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contenttype().data(), this->contenttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contenttype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->contenttype(), output);
  }

  // optional bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:textsecure.AttachmentPointer)
}

::google::protobuf::uint8* AttachmentPointer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:textsecure.AttachmentPointer)
  // optional fixed64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }

  // optional string contentType = 2;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contenttype().data(), this->contenttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contenttype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contenttype(), target);
  }

  // optional bytes key = 3;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textsecure.AttachmentPointer)
  return target;
}

int AttachmentPointer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 id = 1;
    if (has_id()) {
      total_size += 1 + 8;
    }

    // optional string contentType = 2;
    if (has_contenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contenttype());
    }

    // optional bytes key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttachmentPointer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttachmentPointer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttachmentPointer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttachmentPointer::MergeFrom(const AttachmentPointer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_contenttype()) {
      set_contenttype(from.contenttype());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttachmentPointer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttachmentPointer::CopyFrom(const AttachmentPointer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachmentPointer::IsInitialized() const {

  return true;
}

void AttachmentPointer::Swap(AttachmentPointer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(contenttype_, other->contenttype_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttachmentPointer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttachmentPointer_descriptor_;
  metadata.reflection = AttachmentPointer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GroupContext_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupContext_Type_descriptor_;
}
bool GroupContext_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GroupContext_Type GroupContext::UNKNOWN;
const GroupContext_Type GroupContext::UPDATE;
const GroupContext_Type GroupContext::DELIVER;
const GroupContext_Type GroupContext::QUIT;
const GroupContext_Type GroupContext::Type_MIN;
const GroupContext_Type GroupContext::Type_MAX;
const int GroupContext::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GroupContext::kIdFieldNumber;
const int GroupContext::kTypeFieldNumber;
const int GroupContext::kNameFieldNumber;
const int GroupContext::kMembersFieldNumber;
const int GroupContext::kAvatarFieldNumber;
#endif  // !_MSC_VER

GroupContext::GroupContext()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:textsecure.GroupContext)
}

void GroupContext::InitAsDefaultInstance() {
  avatar_ = const_cast< ::textsecure::AttachmentPointer*>(&::textsecure::AttachmentPointer::default_instance());
}

GroupContext::GroupContext(const GroupContext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:textsecure.GroupContext)
}

void GroupContext::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupContext::~GroupContext() {
  // @@protoc_insertion_point(destructor:textsecure.GroupContext)
  SharedDtor();
}

void GroupContext::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete avatar_;
  }
}

void GroupContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupContext_descriptor_;
}

const GroupContext& GroupContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  return *default_instance_;
}

GroupContext* GroupContext::default_instance_ = NULL;

GroupContext* GroupContext::New() const {
  return new GroupContext;
}

void GroupContext::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != NULL) avatar_->::textsecure::AttachmentPointer::Clear();
    }
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:textsecure.GroupContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .textsecure.GroupContext.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::textsecure::GroupContext_Type_IsValid(value)) {
            set_type(static_cast< ::textsecure::GroupContext_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_members;
        break;
      }

      // repeated string members = 4;
      case 4: {
        if (tag == 34) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_members()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->members(this->members_size() - 1).data(),
            this->members(this->members_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "members");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_members;
        if (input->ExpectTag(42)) goto parse_avatar;
        break;
      }

      // optional .textsecure.AttachmentPointer avatar = 5;
      case 5: {
        if (tag == 42) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:textsecure.GroupContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:textsecure.GroupContext)
  return false;
#undef DO_
}

void GroupContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:textsecure.GroupContext)
  // optional bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // optional .textsecure.GroupContext.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated string members = 4;
  for (int i = 0; i < this->members_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->members(i).data(), this->members(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "members");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->members(i), output);
  }

  // optional .textsecure.AttachmentPointer avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->avatar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:textsecure.GroupContext)
}

::google::protobuf::uint8* GroupContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:textsecure.GroupContext)
  // optional bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional .textsecure.GroupContext.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated string members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->members(i).data(), this->members(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "members");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->members(i), target);
  }

  // optional .textsecure.AttachmentPointer avatar = 5;
  if (has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->avatar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textsecure.GroupContext)
  return target;
}

int GroupContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional .textsecure.GroupContext.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .textsecure.AttachmentPointer avatar = 5;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatar());
    }

  }
  // repeated string members = 4;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupContext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupContext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupContext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupContext::MergeFrom(const GroupContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_avatar()) {
      mutable_avatar()->::textsecure::AttachmentPointer::MergeFrom(from.avatar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupContext::CopyFrom(const GroupContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupContext::IsInitialized() const {

  return true;
}

void GroupContext::Swap(GroupContext* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    members_.Swap(&other->members_);
    std::swap(avatar_, other->avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupContext_descriptor_;
  metadata.reflection = GroupContext_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Avatar::kContentTypeFieldNumber;
const int Avatar::kLengthFieldNumber;
#endif  // !_MSC_VER

Avatar::Avatar()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:textsecure.Avatar)
}

void Avatar::InitAsDefaultInstance() {
}

Avatar::Avatar(const Avatar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:textsecure.Avatar)
}

void Avatar::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  contenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Avatar::~Avatar() {
  // @@protoc_insertion_point(destructor:textsecure.Avatar)
  SharedDtor();
}

void Avatar::SharedDtor() {
  if (contenttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contenttype_;
  }
  if (this != default_instance_) {
  }
}

void Avatar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Avatar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Avatar_descriptor_;
}

const Avatar& Avatar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  return *default_instance_;
}

Avatar* Avatar::default_instance_ = NULL;

Avatar* Avatar::New() const {
  return new Avatar;
}

void Avatar::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_contenttype()) {
      if (contenttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contenttype_->clear();
      }
    }
    length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Avatar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:textsecure.Avatar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string contentType = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contenttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contenttype().data(), this->contenttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contenttype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional uint32 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:textsecure.Avatar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:textsecure.Avatar)
  return false;
#undef DO_
}

void Avatar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:textsecure.Avatar)
  // optional string contentType = 1;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contenttype().data(), this->contenttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contenttype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->contenttype(), output);
  }

  // optional uint32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:textsecure.Avatar)
}

::google::protobuf::uint8* Avatar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:textsecure.Avatar)
  // optional string contentType = 1;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contenttype().data(), this->contenttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contenttype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contenttype(), target);
  }

  // optional uint32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textsecure.Avatar)
  return target;
}

int Avatar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string contentType = 1;
    if (has_contenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contenttype());
    }

    // optional uint32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Avatar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Avatar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Avatar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Avatar::MergeFrom(const Avatar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contenttype()) {
      set_contenttype(from.contenttype());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Avatar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Avatar::CopyFrom(const Avatar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Avatar::IsInitialized() const {

  return true;
}

void Avatar::Swap(Avatar* other) {
  if (other != this) {
    std::swap(contenttype_, other->contenttype_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Avatar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Avatar_descriptor_;
  metadata.reflection = Avatar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupDetails::kIdFieldNumber;
const int GroupDetails::kNameFieldNumber;
const int GroupDetails::kMembersFieldNumber;
const int GroupDetails::kAvatarFieldNumber;
const int GroupDetails::kActiveFieldNumber;
#endif  // !_MSC_VER

GroupDetails::GroupDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:textsecure.GroupDetails)
}

void GroupDetails::InitAsDefaultInstance() {
  avatar_ = const_cast< ::textsecure::Avatar*>(&::textsecure::Avatar::default_instance());
}

GroupDetails::GroupDetails(const GroupDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:textsecure.GroupDetails)
}

void GroupDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = NULL;
  active_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupDetails::~GroupDetails() {
  // @@protoc_insertion_point(destructor:textsecure.GroupDetails)
  SharedDtor();
}

void GroupDetails::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete avatar_;
  }
}

void GroupDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupDetails_descriptor_;
}

const GroupDetails& GroupDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  return *default_instance_;
}

GroupDetails* GroupDetails::default_instance_ = NULL;

GroupDetails* GroupDetails::New() const {
  return new GroupDetails;
}

void GroupDetails::Clear() {
  if (_has_bits_[0 / 32] & 27) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != NULL) avatar_->::textsecure::Avatar::Clear();
    }
    active_ = true;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:textsecure.GroupDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_members;
        break;
      }

      // repeated string members = 3;
      case 3: {
        if (tag == 26) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_members()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->members(this->members_size() - 1).data(),
            this->members(this->members_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "members");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_members;
        if (input->ExpectTag(34)) goto parse_avatar;
        break;
      }

      // optional .textsecure.Avatar avatar = 4;
      case 4: {
        if (tag == 34) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_active;
        break;
      }

      // optional bool active = 5 [default = true];
      case 5: {
        if (tag == 40) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:textsecure.GroupDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:textsecure.GroupDetails)
  return false;
#undef DO_
}

void GroupDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:textsecure.GroupDetails)
  // optional bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated string members = 3;
  for (int i = 0; i < this->members_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->members(i).data(), this->members(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "members");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->members(i), output);
  }

  // optional .textsecure.Avatar avatar = 4;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->avatar(), output);
  }

  // optional bool active = 5 [default = true];
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:textsecure.GroupDetails)
}

::google::protobuf::uint8* GroupDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:textsecure.GroupDetails)
  // optional bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated string members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->members(i).data(), this->members(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "members");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->members(i), target);
  }

  // optional .textsecure.Avatar avatar = 4;
  if (has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->avatar(), target);
  }

  // optional bool active = 5 [default = true];
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textsecure.GroupDetails)
  return target;
}

int GroupDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .textsecure.Avatar avatar = 4;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatar());
    }

    // optional bool active = 5 [default = true];
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  // repeated string members = 3;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupDetails::MergeFrom(const GroupDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_avatar()) {
      mutable_avatar()->::textsecure::Avatar::MergeFrom(from.avatar());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupDetails::CopyFrom(const GroupDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupDetails::IsInitialized() const {

  return true;
}

void GroupDetails::Swap(GroupDetails* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    members_.Swap(&other->members_);
    std::swap(avatar_, other->avatar_);
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupDetails_descriptor_;
  metadata.reflection = GroupDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactDetails::kNumberFieldNumber;
const int ContactDetails::kNameFieldNumber;
const int ContactDetails::kAvatarFieldNumber;
const int ContactDetails::kColorFieldNumber;
#endif  // !_MSC_VER

ContactDetails::ContactDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:textsecure.ContactDetails)
}

void ContactDetails::InitAsDefaultInstance() {
  avatar_ = const_cast< ::textsecure::Avatar*>(&::textsecure::Avatar::default_instance());
}

ContactDetails::ContactDetails(const ContactDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:textsecure.ContactDetails)
}

void ContactDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = NULL;
  color_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactDetails::~ContactDetails() {
  // @@protoc_insertion_point(destructor:textsecure.ContactDetails)
  SharedDtor();
}

void ContactDetails::SharedDtor() {
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete number_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete color_;
  }
  if (this != default_instance_) {
    delete avatar_;
  }
}

void ContactDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactDetails_descriptor_;
}

const ContactDetails& ContactDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  return *default_instance_;
}

ContactDetails* ContactDetails::default_instance_ = NULL;

ContactDetails* ContactDetails::New() const {
  return new ContactDetails;
}

void ContactDetails::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_number()) {
      if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        number_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != NULL) avatar_->::textsecure::Avatar::Clear();
    }
    if (has_color()) {
      if (color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        color_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:textsecure.ContactDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string number = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "number");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_avatar;
        break;
      }

      // optional .textsecure.Avatar avatar = 3;
      case 3: {
        if (tag == 26) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_color;
        break;
      }

      // optional string color = 4;
      case 4: {
        if (tag == 34) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->color().data(), this->color().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "color");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:textsecure.ContactDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:textsecure.ContactDetails)
  return false;
#undef DO_
}

void ContactDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:textsecure.ContactDetails)
  // optional string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->number(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .textsecure.Avatar avatar = 3;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->avatar(), output);
  }

  // optional string color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:textsecure.ContactDetails)
}

::google::protobuf::uint8* ContactDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:textsecure.ContactDetails)
  // optional string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->number(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .textsecure.Avatar avatar = 3;
  if (has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->avatar(), target);
  }

  // optional string color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textsecure.ContactDetails)
  return target;
}

int ContactDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .textsecure.Avatar avatar = 3;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatar());
    }

    // optional string color = 4;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactDetails::MergeFrom(const ContactDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_avatar()) {
      mutable_avatar()->::textsecure::Avatar::MergeFrom(from.avatar());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactDetails::CopyFrom(const ContactDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactDetails::IsInitialized() const {

  return true;
}

void ContactDetails::Swap(ContactDetails* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(name_, other->name_);
    std::swap(avatar_, other->avatar_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactDetails_descriptor_;
  metadata.reflection = ContactDetails_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace textsecure

// @@protoc_insertion_point(global_scope)
