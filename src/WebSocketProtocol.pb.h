// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WebSocketProtocol.proto

#ifndef PROTOBUF_WebSocketProtocol_2eproto__INCLUDED
#define PROTOBUF_WebSocketProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace textsecure {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WebSocketProtocol_2eproto();
void protobuf_AssignDesc_WebSocketProtocol_2eproto();
void protobuf_ShutdownFile_WebSocketProtocol_2eproto();

class WebSocketRequestMessage;
class WebSocketResponseMessage;
class WebSocketMessage;

enum WebSocketMessage_Type {
  WebSocketMessage_Type_UNKNOWN = 0,
  WebSocketMessage_Type_REQUEST = 1,
  WebSocketMessage_Type_RESPONSE = 2
};
bool WebSocketMessage_Type_IsValid(int value);
const WebSocketMessage_Type WebSocketMessage_Type_Type_MIN = WebSocketMessage_Type_UNKNOWN;
const WebSocketMessage_Type WebSocketMessage_Type_Type_MAX = WebSocketMessage_Type_RESPONSE;
const int WebSocketMessage_Type_Type_ARRAYSIZE = WebSocketMessage_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* WebSocketMessage_Type_descriptor();
inline const ::std::string& WebSocketMessage_Type_Name(WebSocketMessage_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    WebSocketMessage_Type_descriptor(), value);
}
inline bool WebSocketMessage_Type_Parse(
    const ::std::string& name, WebSocketMessage_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WebSocketMessage_Type>(
    WebSocketMessage_Type_descriptor(), name, value);
}
// ===================================================================

class WebSocketRequestMessage : public ::google::protobuf::Message {
 public:
  WebSocketRequestMessage();
  virtual ~WebSocketRequestMessage();

  WebSocketRequestMessage(const WebSocketRequestMessage& from);

  inline WebSocketRequestMessage& operator=(const WebSocketRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WebSocketRequestMessage& default_instance();

  void Swap(WebSocketRequestMessage* other);

  // implements Message ----------------------------------------------

  WebSocketRequestMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WebSocketRequestMessage& from);
  void MergeFrom(const WebSocketRequestMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string verb = 1;
  inline bool has_verb() const;
  inline void clear_verb();
  static const int kVerbFieldNumber = 1;
  inline const ::std::string& verb() const;
  inline void set_verb(const ::std::string& value);
  inline void set_verb(const char* value);
  inline void set_verb(const char* value, size_t size);
  inline ::std::string* mutable_verb();
  inline ::std::string* release_verb();
  inline void set_allocated_verb(::std::string* verb);

  // optional string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // optional bytes body = 3;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 3;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const void* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // optional uint64 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:textsecure.WebSocketRequestMessage)
 private:
  inline void set_has_verb();
  inline void clear_has_verb();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* verb_;
  ::std::string* path_;
  ::std::string* body_;
  ::google::protobuf::uint64 id_;
  friend void  protobuf_AddDesc_WebSocketProtocol_2eproto();
  friend void protobuf_AssignDesc_WebSocketProtocol_2eproto();
  friend void protobuf_ShutdownFile_WebSocketProtocol_2eproto();

  void InitAsDefaultInstance();
  static WebSocketRequestMessage* default_instance_;
};
// -------------------------------------------------------------------

class WebSocketResponseMessage : public ::google::protobuf::Message {
 public:
  WebSocketResponseMessage();
  virtual ~WebSocketResponseMessage();

  WebSocketResponseMessage(const WebSocketResponseMessage& from);

  inline WebSocketResponseMessage& operator=(const WebSocketResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WebSocketResponseMessage& default_instance();

  void Swap(WebSocketResponseMessage* other);

  // implements Message ----------------------------------------------

  WebSocketResponseMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WebSocketResponseMessage& from);
  void MergeFrom(const WebSocketResponseMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional string message = 3;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional bytes body = 4;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 4;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const void* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:textsecure.WebSocketResponseMessage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_body();
  inline void clear_has_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::std::string* message_;
  ::std::string* body_;
  ::google::protobuf::uint32 status_;
  friend void  protobuf_AddDesc_WebSocketProtocol_2eproto();
  friend void protobuf_AssignDesc_WebSocketProtocol_2eproto();
  friend void protobuf_ShutdownFile_WebSocketProtocol_2eproto();

  void InitAsDefaultInstance();
  static WebSocketResponseMessage* default_instance_;
};
// -------------------------------------------------------------------

class WebSocketMessage : public ::google::protobuf::Message {
 public:
  WebSocketMessage();
  virtual ~WebSocketMessage();

  WebSocketMessage(const WebSocketMessage& from);

  inline WebSocketMessage& operator=(const WebSocketMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WebSocketMessage& default_instance();

  void Swap(WebSocketMessage* other);

  // implements Message ----------------------------------------------

  WebSocketMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WebSocketMessage& from);
  void MergeFrom(const WebSocketMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef WebSocketMessage_Type Type;
  static const Type UNKNOWN = WebSocketMessage_Type_UNKNOWN;
  static const Type REQUEST = WebSocketMessage_Type_REQUEST;
  static const Type RESPONSE = WebSocketMessage_Type_RESPONSE;
  static inline bool Type_IsValid(int value) {
    return WebSocketMessage_Type_IsValid(value);
  }
  static const Type Type_MIN =
    WebSocketMessage_Type_Type_MIN;
  static const Type Type_MAX =
    WebSocketMessage_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    WebSocketMessage_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return WebSocketMessage_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return WebSocketMessage_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return WebSocketMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .textsecure.WebSocketMessage.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::textsecure::WebSocketMessage_Type type() const;
  inline void set_type(::textsecure::WebSocketMessage_Type value);

  // optional .textsecure.WebSocketRequestMessage request = 2;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 2;
  inline const ::textsecure::WebSocketRequestMessage& request() const;
  inline ::textsecure::WebSocketRequestMessage* mutable_request();
  inline ::textsecure::WebSocketRequestMessage* release_request();
  inline void set_allocated_request(::textsecure::WebSocketRequestMessage* request);

  // optional .textsecure.WebSocketResponseMessage response = 3;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 3;
  inline const ::textsecure::WebSocketResponseMessage& response() const;
  inline ::textsecure::WebSocketResponseMessage* mutable_response();
  inline ::textsecure::WebSocketResponseMessage* release_response();
  inline void set_allocated_response(::textsecure::WebSocketResponseMessage* response);

  // @@protoc_insertion_point(class_scope:textsecure.WebSocketMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_response();
  inline void clear_has_response();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::textsecure::WebSocketRequestMessage* request_;
  ::textsecure::WebSocketResponseMessage* response_;
  int type_;
  friend void  protobuf_AddDesc_WebSocketProtocol_2eproto();
  friend void protobuf_AssignDesc_WebSocketProtocol_2eproto();
  friend void protobuf_ShutdownFile_WebSocketProtocol_2eproto();

  void InitAsDefaultInstance();
  static WebSocketMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// WebSocketRequestMessage

// optional string verb = 1;
inline bool WebSocketRequestMessage::has_verb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WebSocketRequestMessage::set_has_verb() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WebSocketRequestMessage::clear_has_verb() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WebSocketRequestMessage::clear_verb() {
  if (verb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    verb_->clear();
  }
  clear_has_verb();
}
inline const ::std::string& WebSocketRequestMessage::verb() const {
  // @@protoc_insertion_point(field_get:textsecure.WebSocketRequestMessage.verb)
  return *verb_;
}
inline void WebSocketRequestMessage::set_verb(const ::std::string& value) {
  set_has_verb();
  if (verb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    verb_ = new ::std::string;
  }
  verb_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.WebSocketRequestMessage.verb)
}
inline void WebSocketRequestMessage::set_verb(const char* value) {
  set_has_verb();
  if (verb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    verb_ = new ::std::string;
  }
  verb_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.WebSocketRequestMessage.verb)
}
inline void WebSocketRequestMessage::set_verb(const char* value, size_t size) {
  set_has_verb();
  if (verb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    verb_ = new ::std::string;
  }
  verb_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.WebSocketRequestMessage.verb)
}
inline ::std::string* WebSocketRequestMessage::mutable_verb() {
  set_has_verb();
  if (verb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    verb_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.WebSocketRequestMessage.verb)
  return verb_;
}
inline ::std::string* WebSocketRequestMessage::release_verb() {
  clear_has_verb();
  if (verb_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = verb_;
    verb_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WebSocketRequestMessage::set_allocated_verb(::std::string* verb) {
  if (verb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete verb_;
  }
  if (verb) {
    set_has_verb();
    verb_ = verb;
  } else {
    clear_has_verb();
    verb_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.WebSocketRequestMessage.verb)
}

// optional string path = 2;
inline bool WebSocketRequestMessage::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WebSocketRequestMessage::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WebSocketRequestMessage::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WebSocketRequestMessage::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& WebSocketRequestMessage::path() const {
  // @@protoc_insertion_point(field_get:textsecure.WebSocketRequestMessage.path)
  return *path_;
}
inline void WebSocketRequestMessage::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.WebSocketRequestMessage.path)
}
inline void WebSocketRequestMessage::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.WebSocketRequestMessage.path)
}
inline void WebSocketRequestMessage::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.WebSocketRequestMessage.path)
}
inline ::std::string* WebSocketRequestMessage::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.WebSocketRequestMessage.path)
  return path_;
}
inline ::std::string* WebSocketRequestMessage::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WebSocketRequestMessage::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.WebSocketRequestMessage.path)
}

// optional bytes body = 3;
inline bool WebSocketRequestMessage::has_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WebSocketRequestMessage::set_has_body() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WebSocketRequestMessage::clear_has_body() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WebSocketRequestMessage::clear_body() {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& WebSocketRequestMessage::body() const {
  // @@protoc_insertion_point(field_get:textsecure.WebSocketRequestMessage.body)
  return *body_;
}
inline void WebSocketRequestMessage::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.WebSocketRequestMessage.body)
}
inline void WebSocketRequestMessage::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.WebSocketRequestMessage.body)
}
inline void WebSocketRequestMessage::set_body(const void* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.WebSocketRequestMessage.body)
}
inline ::std::string* WebSocketRequestMessage::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.WebSocketRequestMessage.body)
  return body_;
}
inline ::std::string* WebSocketRequestMessage::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WebSocketRequestMessage::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.WebSocketRequestMessage.body)
}

// optional uint64 id = 4;
inline bool WebSocketRequestMessage::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WebSocketRequestMessage::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WebSocketRequestMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WebSocketRequestMessage::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 WebSocketRequestMessage::id() const {
  // @@protoc_insertion_point(field_get:textsecure.WebSocketRequestMessage.id)
  return id_;
}
inline void WebSocketRequestMessage::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:textsecure.WebSocketRequestMessage.id)
}

// -------------------------------------------------------------------

// WebSocketResponseMessage

// optional uint64 id = 1;
inline bool WebSocketResponseMessage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WebSocketResponseMessage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WebSocketResponseMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WebSocketResponseMessage::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 WebSocketResponseMessage::id() const {
  // @@protoc_insertion_point(field_get:textsecure.WebSocketResponseMessage.id)
  return id_;
}
inline void WebSocketResponseMessage::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:textsecure.WebSocketResponseMessage.id)
}

// optional uint32 status = 2;
inline bool WebSocketResponseMessage::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WebSocketResponseMessage::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WebSocketResponseMessage::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WebSocketResponseMessage::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 WebSocketResponseMessage::status() const {
  // @@protoc_insertion_point(field_get:textsecure.WebSocketResponseMessage.status)
  return status_;
}
inline void WebSocketResponseMessage::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:textsecure.WebSocketResponseMessage.status)
}

// optional string message = 3;
inline bool WebSocketResponseMessage::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WebSocketResponseMessage::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WebSocketResponseMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WebSocketResponseMessage::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& WebSocketResponseMessage::message() const {
  // @@protoc_insertion_point(field_get:textsecure.WebSocketResponseMessage.message)
  return *message_;
}
inline void WebSocketResponseMessage::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.WebSocketResponseMessage.message)
}
inline void WebSocketResponseMessage::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.WebSocketResponseMessage.message)
}
inline void WebSocketResponseMessage::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.WebSocketResponseMessage.message)
}
inline ::std::string* WebSocketResponseMessage::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.WebSocketResponseMessage.message)
  return message_;
}
inline ::std::string* WebSocketResponseMessage::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WebSocketResponseMessage::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.WebSocketResponseMessage.message)
}

// optional bytes body = 4;
inline bool WebSocketResponseMessage::has_body() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WebSocketResponseMessage::set_has_body() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WebSocketResponseMessage::clear_has_body() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WebSocketResponseMessage::clear_body() {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& WebSocketResponseMessage::body() const {
  // @@protoc_insertion_point(field_get:textsecure.WebSocketResponseMessage.body)
  return *body_;
}
inline void WebSocketResponseMessage::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.WebSocketResponseMessage.body)
}
inline void WebSocketResponseMessage::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.WebSocketResponseMessage.body)
}
inline void WebSocketResponseMessage::set_body(const void* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.WebSocketResponseMessage.body)
}
inline ::std::string* WebSocketResponseMessage::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.WebSocketResponseMessage.body)
  return body_;
}
inline ::std::string* WebSocketResponseMessage::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WebSocketResponseMessage::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.WebSocketResponseMessage.body)
}

// -------------------------------------------------------------------

// WebSocketMessage

// optional .textsecure.WebSocketMessage.Type type = 1;
inline bool WebSocketMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WebSocketMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WebSocketMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WebSocketMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::textsecure::WebSocketMessage_Type WebSocketMessage::type() const {
  // @@protoc_insertion_point(field_get:textsecure.WebSocketMessage.type)
  return static_cast< ::textsecure::WebSocketMessage_Type >(type_);
}
inline void WebSocketMessage::set_type(::textsecure::WebSocketMessage_Type value) {
  assert(::textsecure::WebSocketMessage_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:textsecure.WebSocketMessage.type)
}

// optional .textsecure.WebSocketRequestMessage request = 2;
inline bool WebSocketMessage::has_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WebSocketMessage::set_has_request() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WebSocketMessage::clear_has_request() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WebSocketMessage::clear_request() {
  if (request_ != NULL) request_->::textsecure::WebSocketRequestMessage::Clear();
  clear_has_request();
}
inline const ::textsecure::WebSocketRequestMessage& WebSocketMessage::request() const {
  // @@protoc_insertion_point(field_get:textsecure.WebSocketMessage.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::textsecure::WebSocketRequestMessage* WebSocketMessage::mutable_request() {
  set_has_request();
  if (request_ == NULL) request_ = new ::textsecure::WebSocketRequestMessage;
  // @@protoc_insertion_point(field_mutable:textsecure.WebSocketMessage.request)
  return request_;
}
inline ::textsecure::WebSocketRequestMessage* WebSocketMessage::release_request() {
  clear_has_request();
  ::textsecure::WebSocketRequestMessage* temp = request_;
  request_ = NULL;
  return temp;
}
inline void WebSocketMessage::set_allocated_request(::textsecure::WebSocketRequestMessage* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.WebSocketMessage.request)
}

// optional .textsecure.WebSocketResponseMessage response = 3;
inline bool WebSocketMessage::has_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WebSocketMessage::set_has_response() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WebSocketMessage::clear_has_response() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WebSocketMessage::clear_response() {
  if (response_ != NULL) response_->::textsecure::WebSocketResponseMessage::Clear();
  clear_has_response();
}
inline const ::textsecure::WebSocketResponseMessage& WebSocketMessage::response() const {
  // @@protoc_insertion_point(field_get:textsecure.WebSocketMessage.response)
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
inline ::textsecure::WebSocketResponseMessage* WebSocketMessage::mutable_response() {
  set_has_response();
  if (response_ == NULL) response_ = new ::textsecure::WebSocketResponseMessage;
  // @@protoc_insertion_point(field_mutable:textsecure.WebSocketMessage.response)
  return response_;
}
inline ::textsecure::WebSocketResponseMessage* WebSocketMessage::release_response() {
  clear_has_response();
  ::textsecure::WebSocketResponseMessage* temp = response_;
  response_ = NULL;
  return temp;
}
inline void WebSocketMessage::set_allocated_response(::textsecure::WebSocketResponseMessage* response) {
  delete response_;
  response_ = response;
  if (response) {
    set_has_response();
  } else {
    clear_has_response();
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.WebSocketMessage.response)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace textsecure

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::textsecure::WebSocketMessage_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::textsecure::WebSocketMessage_Type>() {
  return ::textsecure::WebSocketMessage_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WebSocketProtocol_2eproto__INCLUDED
