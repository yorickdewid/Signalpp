// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WebSocketProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WebSocketProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace textsecure {

namespace {

const ::google::protobuf::Descriptor* WebSocketRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebSocketRequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebSocketResponseMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebSocketResponseMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebSocketMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebSocketMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WebSocketMessage_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_WebSocketProtocol_2eproto() {
  protobuf_AddDesc_WebSocketProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WebSocketProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  WebSocketRequestMessage_descriptor_ = file->message_type(0);
  static const int WebSocketRequestMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketRequestMessage, verb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketRequestMessage, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketRequestMessage, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketRequestMessage, id_),
  };
  WebSocketRequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebSocketRequestMessage_descriptor_,
      WebSocketRequestMessage::default_instance_,
      WebSocketRequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketRequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketRequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebSocketRequestMessage));
  WebSocketResponseMessage_descriptor_ = file->message_type(1);
  static const int WebSocketResponseMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketResponseMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketResponseMessage, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketResponseMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketResponseMessage, body_),
  };
  WebSocketResponseMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebSocketResponseMessage_descriptor_,
      WebSocketResponseMessage::default_instance_,
      WebSocketResponseMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketResponseMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketResponseMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebSocketResponseMessage));
  WebSocketMessage_descriptor_ = file->message_type(2);
  static const int WebSocketMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketMessage, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketMessage, response_),
  };
  WebSocketMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebSocketMessage_descriptor_,
      WebSocketMessage::default_instance_,
      WebSocketMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebSocketMessage));
  WebSocketMessage_Type_descriptor_ = WebSocketMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WebSocketProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebSocketRequestMessage_descriptor_, &WebSocketRequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebSocketResponseMessage_descriptor_, &WebSocketResponseMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebSocketMessage_descriptor_, &WebSocketMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WebSocketProtocol_2eproto() {
  delete WebSocketRequestMessage::default_instance_;
  delete WebSocketRequestMessage_reflection_;
  delete WebSocketResponseMessage::default_instance_;
  delete WebSocketResponseMessage_reflection_;
  delete WebSocketMessage::default_instance_;
  delete WebSocketMessage_reflection_;
}

void protobuf_AddDesc_WebSocketProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027WebSocketProtocol.proto\022\ntextsecure\"O\n"
    "\027WebSocketRequestMessage\022\014\n\004verb\030\001 \001(\t\022\014"
    "\n\004path\030\002 \001(\t\022\014\n\004body\030\003 \001(\014\022\n\n\002id\030\004 \001(\004\"U"
    "\n\030WebSocketResponseMessage\022\n\n\002id\030\001 \001(\004\022\016"
    "\n\006status\030\002 \001(\r\022\017\n\007message\030\003 \001(\t\022\014\n\004body\030"
    "\004 \001(\014\"\341\001\n\020WebSocketMessage\022/\n\004type\030\001 \001(\016"
    "2!.textsecure.WebSocketMessage.Type\0224\n\007r"
    "equest\030\002 \001(\0132#.textsecure.WebSocketReque"
    "stMessage\0226\n\010response\030\003 \001(\0132$.textsecure"
    ".WebSocketResponseMessage\".\n\004Type\022\013\n\007UNK"
    "NOWN\020\000\022\013\n\007REQUEST\020\001\022\014\n\010RESPONSE\020\002", 433);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WebSocketProtocol.proto", &protobuf_RegisterTypes);
  WebSocketRequestMessage::default_instance_ = new WebSocketRequestMessage();
  WebSocketResponseMessage::default_instance_ = new WebSocketResponseMessage();
  WebSocketMessage::default_instance_ = new WebSocketMessage();
  WebSocketRequestMessage::default_instance_->InitAsDefaultInstance();
  WebSocketResponseMessage::default_instance_->InitAsDefaultInstance();
  WebSocketMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WebSocketProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WebSocketProtocol_2eproto {
  StaticDescriptorInitializer_WebSocketProtocol_2eproto() {
    protobuf_AddDesc_WebSocketProtocol_2eproto();
  }
} static_descriptor_initializer_WebSocketProtocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WebSocketRequestMessage::kVerbFieldNumber;
const int WebSocketRequestMessage::kPathFieldNumber;
const int WebSocketRequestMessage::kBodyFieldNumber;
const int WebSocketRequestMessage::kIdFieldNumber;
#endif  // !_MSC_VER

WebSocketRequestMessage::WebSocketRequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:textsecure.WebSocketRequestMessage)
}

void WebSocketRequestMessage::InitAsDefaultInstance() {
}

WebSocketRequestMessage::WebSocketRequestMessage(const WebSocketRequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:textsecure.WebSocketRequestMessage)
}

void WebSocketRequestMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  verb_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebSocketRequestMessage::~WebSocketRequestMessage() {
  // @@protoc_insertion_point(destructor:textsecure.WebSocketRequestMessage)
  SharedDtor();
}

void WebSocketRequestMessage::SharedDtor() {
  if (verb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete verb_;
  }
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (this != default_instance_) {
  }
}

void WebSocketRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebSocketRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebSocketRequestMessage_descriptor_;
}

const WebSocketRequestMessage& WebSocketRequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocketProtocol_2eproto();
  return *default_instance_;
}

WebSocketRequestMessage* WebSocketRequestMessage::default_instance_ = NULL;

WebSocketRequestMessage* WebSocketRequestMessage::New() const {
  return new WebSocketRequestMessage;
}

void WebSocketRequestMessage::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_verb()) {
      if (verb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        verb_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        body_->clear();
      }
    }
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebSocketRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:textsecure.WebSocketRequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string verb = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verb().data(), this->verb().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "verb");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional string path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_body;
        break;
      }

      // optional bytes body = 3;
      case 3: {
        if (tag == 26) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint64 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:textsecure.WebSocketRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:textsecure.WebSocketRequestMessage)
  return false;
#undef DO_
}

void WebSocketRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:textsecure.WebSocketRequestMessage)
  // optional string verb = 1;
  if (has_verb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verb().data(), this->verb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verb");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->verb(), output);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // optional bytes body = 3;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->body(), output);
  }

  // optional uint64 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:textsecure.WebSocketRequestMessage)
}

::google::protobuf::uint8* WebSocketRequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:textsecure.WebSocketRequestMessage)
  // optional string verb = 1;
  if (has_verb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verb().data(), this->verb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verb");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->verb(), target);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional bytes body = 3;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->body(), target);
  }

  // optional uint64 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textsecure.WebSocketRequestMessage)
  return target;
}

int WebSocketRequestMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string verb = 1;
    if (has_verb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verb());
    }

    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional bytes body = 3;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

    // optional uint64 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebSocketRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebSocketRequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebSocketRequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebSocketRequestMessage::MergeFrom(const WebSocketRequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_verb()) {
      set_verb(from.verb());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebSocketRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebSocketRequestMessage::CopyFrom(const WebSocketRequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebSocketRequestMessage::IsInitialized() const {

  return true;
}

void WebSocketRequestMessage::Swap(WebSocketRequestMessage* other) {
  if (other != this) {
    std::swap(verb_, other->verb_);
    std::swap(path_, other->path_);
    std::swap(body_, other->body_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebSocketRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebSocketRequestMessage_descriptor_;
  metadata.reflection = WebSocketRequestMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebSocketResponseMessage::kIdFieldNumber;
const int WebSocketResponseMessage::kStatusFieldNumber;
const int WebSocketResponseMessage::kMessageFieldNumber;
const int WebSocketResponseMessage::kBodyFieldNumber;
#endif  // !_MSC_VER

WebSocketResponseMessage::WebSocketResponseMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:textsecure.WebSocketResponseMessage)
}

void WebSocketResponseMessage::InitAsDefaultInstance() {
}

WebSocketResponseMessage::WebSocketResponseMessage(const WebSocketResponseMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:textsecure.WebSocketResponseMessage)
}

void WebSocketResponseMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  status_ = 0u;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebSocketResponseMessage::~WebSocketResponseMessage() {
  // @@protoc_insertion_point(destructor:textsecure.WebSocketResponseMessage)
  SharedDtor();
}

void WebSocketResponseMessage::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (this != default_instance_) {
  }
}

void WebSocketResponseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebSocketResponseMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebSocketResponseMessage_descriptor_;
}

const WebSocketResponseMessage& WebSocketResponseMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocketProtocol_2eproto();
  return *default_instance_;
}

WebSocketResponseMessage* WebSocketResponseMessage::default_instance_ = NULL;

WebSocketResponseMessage* WebSocketResponseMessage::New() const {
  return new WebSocketResponseMessage;
}

void WebSocketResponseMessage::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    id_ = GOOGLE_ULONGLONG(0);
    status_ = 0u;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebSocketResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:textsecure.WebSocketResponseMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_body;
        break;
      }

      // optional bytes body = 4;
      case 4: {
        if (tag == 34) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:textsecure.WebSocketResponseMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:textsecure.WebSocketResponseMessage)
  return false;
#undef DO_
}

void WebSocketResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:textsecure.WebSocketResponseMessage)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // optional string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // optional bytes body = 4;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:textsecure.WebSocketResponseMessage)
}

::google::protobuf::uint8* WebSocketResponseMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:textsecure.WebSocketResponseMessage)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // optional string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // optional bytes body = 4;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textsecure.WebSocketResponseMessage)
  return target;
}

int WebSocketResponseMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional bytes body = 4;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebSocketResponseMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebSocketResponseMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebSocketResponseMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebSocketResponseMessage::MergeFrom(const WebSocketResponseMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebSocketResponseMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebSocketResponseMessage::CopyFrom(const WebSocketResponseMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebSocketResponseMessage::IsInitialized() const {

  return true;
}

void WebSocketResponseMessage::Swap(WebSocketResponseMessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(message_, other->message_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebSocketResponseMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebSocketResponseMessage_descriptor_;
  metadata.reflection = WebSocketResponseMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* WebSocketMessage_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebSocketMessage_Type_descriptor_;
}
bool WebSocketMessage_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const WebSocketMessage_Type WebSocketMessage::UNKNOWN;
const WebSocketMessage_Type WebSocketMessage::REQUEST;
const WebSocketMessage_Type WebSocketMessage::RESPONSE;
const WebSocketMessage_Type WebSocketMessage::Type_MIN;
const WebSocketMessage_Type WebSocketMessage::Type_MAX;
const int WebSocketMessage::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int WebSocketMessage::kTypeFieldNumber;
const int WebSocketMessage::kRequestFieldNumber;
const int WebSocketMessage::kResponseFieldNumber;
#endif  // !_MSC_VER

WebSocketMessage::WebSocketMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:textsecure.WebSocketMessage)
}

void WebSocketMessage::InitAsDefaultInstance() {
  request_ = const_cast< ::textsecure::WebSocketRequestMessage*>(&::textsecure::WebSocketRequestMessage::default_instance());
  response_ = const_cast< ::textsecure::WebSocketResponseMessage*>(&::textsecure::WebSocketResponseMessage::default_instance());
}

WebSocketMessage::WebSocketMessage(const WebSocketMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:textsecure.WebSocketMessage)
}

void WebSocketMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebSocketMessage::~WebSocketMessage() {
  // @@protoc_insertion_point(destructor:textsecure.WebSocketMessage)
  SharedDtor();
}

void WebSocketMessage::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void WebSocketMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebSocketMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebSocketMessage_descriptor_;
}

const WebSocketMessage& WebSocketMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocketProtocol_2eproto();
  return *default_instance_;
}

WebSocketMessage* WebSocketMessage::default_instance_ = NULL;

WebSocketMessage* WebSocketMessage::New() const {
  return new WebSocketMessage;
}

void WebSocketMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 0;
    if (has_request()) {
      if (request_ != NULL) request_->::textsecure::WebSocketRequestMessage::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::textsecure::WebSocketResponseMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebSocketMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:textsecure.WebSocketMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .textsecure.WebSocketMessage.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::textsecure::WebSocketMessage_Type_IsValid(value)) {
            set_type(static_cast< ::textsecure::WebSocketMessage_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request;
        break;
      }

      // optional .textsecure.WebSocketRequestMessage request = 2;
      case 2: {
        if (tag == 18) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_response;
        break;
      }

      // optional .textsecure.WebSocketResponseMessage response = 3;
      case 3: {
        if (tag == 26) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:textsecure.WebSocketMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:textsecure.WebSocketMessage)
  return false;
#undef DO_
}

void WebSocketMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:textsecure.WebSocketMessage)
  // optional .textsecure.WebSocketMessage.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .textsecure.WebSocketRequestMessage request = 2;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->request(), output);
  }

  // optional .textsecure.WebSocketResponseMessage response = 3;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:textsecure.WebSocketMessage)
}

::google::protobuf::uint8* WebSocketMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:textsecure.WebSocketMessage)
  // optional .textsecure.WebSocketMessage.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .textsecure.WebSocketRequestMessage request = 2;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->request(), target);
  }

  // optional .textsecure.WebSocketResponseMessage response = 3;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textsecure.WebSocketMessage)
  return target;
}

int WebSocketMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .textsecure.WebSocketMessage.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .textsecure.WebSocketRequestMessage request = 2;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .textsecure.WebSocketResponseMessage response = 3;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebSocketMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebSocketMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebSocketMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebSocketMessage::MergeFrom(const WebSocketMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_request()) {
      mutable_request()->::textsecure::WebSocketRequestMessage::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::textsecure::WebSocketResponseMessage::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebSocketMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebSocketMessage::CopyFrom(const WebSocketMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebSocketMessage::IsInitialized() const {

  return true;
}

void WebSocketMessage::Swap(WebSocketMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebSocketMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebSocketMessage_descriptor_;
  metadata.reflection = WebSocketMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace textsecure

// @@protoc_insertion_point(global_scope)
