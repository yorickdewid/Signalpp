// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DeviceMessages.proto

#ifndef PROTOBUF_DeviceMessages_2eproto__INCLUDED
#define PROTOBUF_DeviceMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace textsecure {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DeviceMessages_2eproto();
void protobuf_AssignDesc_DeviceMessages_2eproto();
void protobuf_ShutdownFile_DeviceMessages_2eproto();

class ProvisioningUuid;
class ProvisionEnvelope;
class ProvisionMessage;

// ===================================================================

class ProvisioningUuid : public ::google::protobuf::Message {
 public:
  ProvisioningUuid();
  virtual ~ProvisioningUuid();

  ProvisioningUuid(const ProvisioningUuid& from);

  inline ProvisioningUuid& operator=(const ProvisioningUuid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProvisioningUuid& default_instance();

  void Swap(ProvisioningUuid* other);

  // implements Message ----------------------------------------------

  ProvisioningUuid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProvisioningUuid& from);
  void MergeFrom(const ProvisioningUuid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:textsecure.ProvisioningUuid)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uuid_;
  friend void  protobuf_AddDesc_DeviceMessages_2eproto();
  friend void protobuf_AssignDesc_DeviceMessages_2eproto();
  friend void protobuf_ShutdownFile_DeviceMessages_2eproto();

  void InitAsDefaultInstance();
  static ProvisioningUuid* default_instance_;
};
// -------------------------------------------------------------------

class ProvisionEnvelope : public ::google::protobuf::Message {
 public:
  ProvisionEnvelope();
  virtual ~ProvisionEnvelope();

  ProvisionEnvelope(const ProvisionEnvelope& from);

  inline ProvisionEnvelope& operator=(const ProvisionEnvelope& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProvisionEnvelope& default_instance();

  void Swap(ProvisionEnvelope* other);

  // implements Message ----------------------------------------------

  ProvisionEnvelope* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProvisionEnvelope& from);
  void MergeFrom(const ProvisionEnvelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes publicKey = 1;
  inline bool has_publickey() const;
  inline void clear_publickey();
  static const int kPublicKeyFieldNumber = 1;
  inline const ::std::string& publickey() const;
  inline void set_publickey(const ::std::string& value);
  inline void set_publickey(const char* value);
  inline void set_publickey(const void* value, size_t size);
  inline ::std::string* mutable_publickey();
  inline ::std::string* release_publickey();
  inline void set_allocated_publickey(::std::string* publickey);

  // optional bytes body = 2;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 2;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const void* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:textsecure.ProvisionEnvelope)
 private:
  inline void set_has_publickey();
  inline void clear_has_publickey();
  inline void set_has_body();
  inline void clear_has_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* publickey_;
  ::std::string* body_;
  friend void  protobuf_AddDesc_DeviceMessages_2eproto();
  friend void protobuf_AssignDesc_DeviceMessages_2eproto();
  friend void protobuf_ShutdownFile_DeviceMessages_2eproto();

  void InitAsDefaultInstance();
  static ProvisionEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class ProvisionMessage : public ::google::protobuf::Message {
 public:
  ProvisionMessage();
  virtual ~ProvisionMessage();

  ProvisionMessage(const ProvisionMessage& from);

  inline ProvisionMessage& operator=(const ProvisionMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProvisionMessage& default_instance();

  void Swap(ProvisionMessage* other);

  // implements Message ----------------------------------------------

  ProvisionMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProvisionMessage& from);
  void MergeFrom(const ProvisionMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes identityKeyPrivate = 2;
  inline bool has_identitykeyprivate() const;
  inline void clear_identitykeyprivate();
  static const int kIdentityKeyPrivateFieldNumber = 2;
  inline const ::std::string& identitykeyprivate() const;
  inline void set_identitykeyprivate(const ::std::string& value);
  inline void set_identitykeyprivate(const char* value);
  inline void set_identitykeyprivate(const void* value, size_t size);
  inline ::std::string* mutable_identitykeyprivate();
  inline ::std::string* release_identitykeyprivate();
  inline void set_allocated_identitykeyprivate(::std::string* identitykeyprivate);

  // optional string number = 3;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 3;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  inline void set_allocated_number(::std::string* number);

  // optional string provisioningCode = 4;
  inline bool has_provisioningcode() const;
  inline void clear_provisioningcode();
  static const int kProvisioningCodeFieldNumber = 4;
  inline const ::std::string& provisioningcode() const;
  inline void set_provisioningcode(const ::std::string& value);
  inline void set_provisioningcode(const char* value);
  inline void set_provisioningcode(const char* value, size_t size);
  inline ::std::string* mutable_provisioningcode();
  inline ::std::string* release_provisioningcode();
  inline void set_allocated_provisioningcode(::std::string* provisioningcode);

  // optional string userAgent = 5;
  inline bool has_useragent() const;
  inline void clear_useragent();
  static const int kUserAgentFieldNumber = 5;
  inline const ::std::string& useragent() const;
  inline void set_useragent(const ::std::string& value);
  inline void set_useragent(const char* value);
  inline void set_useragent(const char* value, size_t size);
  inline ::std::string* mutable_useragent();
  inline ::std::string* release_useragent();
  inline void set_allocated_useragent(::std::string* useragent);

  // @@protoc_insertion_point(class_scope:textsecure.ProvisionMessage)
 private:
  inline void set_has_identitykeyprivate();
  inline void clear_has_identitykeyprivate();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_provisioningcode();
  inline void clear_has_provisioningcode();
  inline void set_has_useragent();
  inline void clear_has_useragent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* identitykeyprivate_;
  ::std::string* number_;
  ::std::string* provisioningcode_;
  ::std::string* useragent_;
  friend void  protobuf_AddDesc_DeviceMessages_2eproto();
  friend void protobuf_AssignDesc_DeviceMessages_2eproto();
  friend void protobuf_ShutdownFile_DeviceMessages_2eproto();

  void InitAsDefaultInstance();
  static ProvisionMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// ProvisioningUuid

// optional string uuid = 1;
inline bool ProvisioningUuid::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProvisioningUuid::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProvisioningUuid::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProvisioningUuid::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& ProvisioningUuid::uuid() const {
  // @@protoc_insertion_point(field_get:textsecure.ProvisioningUuid.uuid)
  return *uuid_;
}
inline void ProvisioningUuid::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.ProvisioningUuid.uuid)
}
inline void ProvisioningUuid::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.ProvisioningUuid.uuid)
}
inline void ProvisioningUuid::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.ProvisioningUuid.uuid)
}
inline ::std::string* ProvisioningUuid::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.ProvisioningUuid.uuid)
  return uuid_;
}
inline ::std::string* ProvisioningUuid::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProvisioningUuid::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.ProvisioningUuid.uuid)
}

// -------------------------------------------------------------------

// ProvisionEnvelope

// optional bytes publicKey = 1;
inline bool ProvisionEnvelope::has_publickey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProvisionEnvelope::set_has_publickey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProvisionEnvelope::clear_has_publickey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProvisionEnvelope::clear_publickey() {
  if (publickey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publickey_->clear();
  }
  clear_has_publickey();
}
inline const ::std::string& ProvisionEnvelope::publickey() const {
  // @@protoc_insertion_point(field_get:textsecure.ProvisionEnvelope.publicKey)
  return *publickey_;
}
inline void ProvisionEnvelope::set_publickey(const ::std::string& value) {
  set_has_publickey();
  if (publickey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publickey_ = new ::std::string;
  }
  publickey_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.ProvisionEnvelope.publicKey)
}
inline void ProvisionEnvelope::set_publickey(const char* value) {
  set_has_publickey();
  if (publickey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publickey_ = new ::std::string;
  }
  publickey_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.ProvisionEnvelope.publicKey)
}
inline void ProvisionEnvelope::set_publickey(const void* value, size_t size) {
  set_has_publickey();
  if (publickey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publickey_ = new ::std::string;
  }
  publickey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.ProvisionEnvelope.publicKey)
}
inline ::std::string* ProvisionEnvelope::mutable_publickey() {
  set_has_publickey();
  if (publickey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publickey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.ProvisionEnvelope.publicKey)
  return publickey_;
}
inline ::std::string* ProvisionEnvelope::release_publickey() {
  clear_has_publickey();
  if (publickey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = publickey_;
    publickey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProvisionEnvelope::set_allocated_publickey(::std::string* publickey) {
  if (publickey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete publickey_;
  }
  if (publickey) {
    set_has_publickey();
    publickey_ = publickey;
  } else {
    clear_has_publickey();
    publickey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.ProvisionEnvelope.publicKey)
}

// optional bytes body = 2;
inline bool ProvisionEnvelope::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProvisionEnvelope::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProvisionEnvelope::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProvisionEnvelope::clear_body() {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& ProvisionEnvelope::body() const {
  // @@protoc_insertion_point(field_get:textsecure.ProvisionEnvelope.body)
  return *body_;
}
inline void ProvisionEnvelope::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.ProvisionEnvelope.body)
}
inline void ProvisionEnvelope::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.ProvisionEnvelope.body)
}
inline void ProvisionEnvelope::set_body(const void* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.ProvisionEnvelope.body)
}
inline ::std::string* ProvisionEnvelope::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.ProvisionEnvelope.body)
  return body_;
}
inline ::std::string* ProvisionEnvelope::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProvisionEnvelope::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.ProvisionEnvelope.body)
}

// -------------------------------------------------------------------

// ProvisionMessage

// optional bytes identityKeyPrivate = 2;
inline bool ProvisionMessage::has_identitykeyprivate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProvisionMessage::set_has_identitykeyprivate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProvisionMessage::clear_has_identitykeyprivate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProvisionMessage::clear_identitykeyprivate() {
  if (identitykeyprivate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identitykeyprivate_->clear();
  }
  clear_has_identitykeyprivate();
}
inline const ::std::string& ProvisionMessage::identitykeyprivate() const {
  // @@protoc_insertion_point(field_get:textsecure.ProvisionMessage.identityKeyPrivate)
  return *identitykeyprivate_;
}
inline void ProvisionMessage::set_identitykeyprivate(const ::std::string& value) {
  set_has_identitykeyprivate();
  if (identitykeyprivate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identitykeyprivate_ = new ::std::string;
  }
  identitykeyprivate_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.ProvisionMessage.identityKeyPrivate)
}
inline void ProvisionMessage::set_identitykeyprivate(const char* value) {
  set_has_identitykeyprivate();
  if (identitykeyprivate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identitykeyprivate_ = new ::std::string;
  }
  identitykeyprivate_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.ProvisionMessage.identityKeyPrivate)
}
inline void ProvisionMessage::set_identitykeyprivate(const void* value, size_t size) {
  set_has_identitykeyprivate();
  if (identitykeyprivate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identitykeyprivate_ = new ::std::string;
  }
  identitykeyprivate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.ProvisionMessage.identityKeyPrivate)
}
inline ::std::string* ProvisionMessage::mutable_identitykeyprivate() {
  set_has_identitykeyprivate();
  if (identitykeyprivate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identitykeyprivate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.ProvisionMessage.identityKeyPrivate)
  return identitykeyprivate_;
}
inline ::std::string* ProvisionMessage::release_identitykeyprivate() {
  clear_has_identitykeyprivate();
  if (identitykeyprivate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = identitykeyprivate_;
    identitykeyprivate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProvisionMessage::set_allocated_identitykeyprivate(::std::string* identitykeyprivate) {
  if (identitykeyprivate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identitykeyprivate_;
  }
  if (identitykeyprivate) {
    set_has_identitykeyprivate();
    identitykeyprivate_ = identitykeyprivate;
  } else {
    clear_has_identitykeyprivate();
    identitykeyprivate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.ProvisionMessage.identityKeyPrivate)
}

// optional string number = 3;
inline bool ProvisionMessage::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProvisionMessage::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProvisionMessage::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProvisionMessage::clear_number() {
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_->clear();
  }
  clear_has_number();
}
inline const ::std::string& ProvisionMessage::number() const {
  // @@protoc_insertion_point(field_get:textsecure.ProvisionMessage.number)
  return *number_;
}
inline void ProvisionMessage::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.ProvisionMessage.number)
}
inline void ProvisionMessage::set_number(const char* value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.ProvisionMessage.number)
}
inline void ProvisionMessage::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.ProvisionMessage.number)
}
inline ::std::string* ProvisionMessage::mutable_number() {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.ProvisionMessage.number)
  return number_;
}
inline ::std::string* ProvisionMessage::release_number() {
  clear_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProvisionMessage::set_allocated_number(::std::string* number) {
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete number_;
  }
  if (number) {
    set_has_number();
    number_ = number;
  } else {
    clear_has_number();
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.ProvisionMessage.number)
}

// optional string provisioningCode = 4;
inline bool ProvisionMessage::has_provisioningcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProvisionMessage::set_has_provisioningcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProvisionMessage::clear_has_provisioningcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProvisionMessage::clear_provisioningcode() {
  if (provisioningcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    provisioningcode_->clear();
  }
  clear_has_provisioningcode();
}
inline const ::std::string& ProvisionMessage::provisioningcode() const {
  // @@protoc_insertion_point(field_get:textsecure.ProvisionMessage.provisioningCode)
  return *provisioningcode_;
}
inline void ProvisionMessage::set_provisioningcode(const ::std::string& value) {
  set_has_provisioningcode();
  if (provisioningcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    provisioningcode_ = new ::std::string;
  }
  provisioningcode_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.ProvisionMessage.provisioningCode)
}
inline void ProvisionMessage::set_provisioningcode(const char* value) {
  set_has_provisioningcode();
  if (provisioningcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    provisioningcode_ = new ::std::string;
  }
  provisioningcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.ProvisionMessage.provisioningCode)
}
inline void ProvisionMessage::set_provisioningcode(const char* value, size_t size) {
  set_has_provisioningcode();
  if (provisioningcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    provisioningcode_ = new ::std::string;
  }
  provisioningcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.ProvisionMessage.provisioningCode)
}
inline ::std::string* ProvisionMessage::mutable_provisioningcode() {
  set_has_provisioningcode();
  if (provisioningcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    provisioningcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.ProvisionMessage.provisioningCode)
  return provisioningcode_;
}
inline ::std::string* ProvisionMessage::release_provisioningcode() {
  clear_has_provisioningcode();
  if (provisioningcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = provisioningcode_;
    provisioningcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProvisionMessage::set_allocated_provisioningcode(::std::string* provisioningcode) {
  if (provisioningcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete provisioningcode_;
  }
  if (provisioningcode) {
    set_has_provisioningcode();
    provisioningcode_ = provisioningcode;
  } else {
    clear_has_provisioningcode();
    provisioningcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.ProvisionMessage.provisioningCode)
}

// optional string userAgent = 5;
inline bool ProvisionMessage::has_useragent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProvisionMessage::set_has_useragent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProvisionMessage::clear_has_useragent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProvisionMessage::clear_useragent() {
  if (useragent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    useragent_->clear();
  }
  clear_has_useragent();
}
inline const ::std::string& ProvisionMessage::useragent() const {
  // @@protoc_insertion_point(field_get:textsecure.ProvisionMessage.userAgent)
  return *useragent_;
}
inline void ProvisionMessage::set_useragent(const ::std::string& value) {
  set_has_useragent();
  if (useragent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    useragent_ = new ::std::string;
  }
  useragent_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.ProvisionMessage.userAgent)
}
inline void ProvisionMessage::set_useragent(const char* value) {
  set_has_useragent();
  if (useragent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    useragent_ = new ::std::string;
  }
  useragent_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.ProvisionMessage.userAgent)
}
inline void ProvisionMessage::set_useragent(const char* value, size_t size) {
  set_has_useragent();
  if (useragent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    useragent_ = new ::std::string;
  }
  useragent_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.ProvisionMessage.userAgent)
}
inline ::std::string* ProvisionMessage::mutable_useragent() {
  set_has_useragent();
  if (useragent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    useragent_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.ProvisionMessage.userAgent)
  return useragent_;
}
inline ::std::string* ProvisionMessage::release_useragent() {
  clear_has_useragent();
  if (useragent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = useragent_;
    useragent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProvisionMessage::set_allocated_useragent(::std::string* useragent) {
  if (useragent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete useragent_;
  }
  if (useragent) {
    set_has_useragent();
    useragent_ = useragent;
  } else {
    clear_has_useragent();
    useragent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.ProvisionMessage.userAgent)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace textsecure

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DeviceMessages_2eproto__INCLUDED
