// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IncomingPushMessageSignal.proto

#ifndef PROTOBUF_IncomingPushMessageSignal_2eproto__INCLUDED
#define PROTOBUF_IncomingPushMessageSignal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace textsecure {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
void protobuf_AssignDesc_IncomingPushMessageSignal_2eproto();
void protobuf_ShutdownFile_IncomingPushMessageSignal_2eproto();

class Envelope;
class Content;
class DataMessage;
class SyncMessage;
class SyncMessage_Sent;
class SyncMessage_Contacts;
class SyncMessage_Groups;
class SyncMessage_Blocked;
class SyncMessage_Request;
class SyncMessage_Read;
class AttachmentPointer;
class GroupContext;
class Avatar;
class GroupDetails;
class ContactDetails;

enum Envelope_Type {
  Envelope_Type_UNKNOWN = 0,
  Envelope_Type_CIPHERTEXT = 1,
  Envelope_Type_KEY_EXCHANGE = 2,
  Envelope_Type_PREKEY_BUNDLE = 3,
  Envelope_Type_RECEIPT = 5
};
bool Envelope_Type_IsValid(int value);
const Envelope_Type Envelope_Type_Type_MIN = Envelope_Type_UNKNOWN;
const Envelope_Type Envelope_Type_Type_MAX = Envelope_Type_RECEIPT;
const int Envelope_Type_Type_ARRAYSIZE = Envelope_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Envelope_Type_descriptor();
inline const ::std::string& Envelope_Type_Name(Envelope_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Envelope_Type_descriptor(), value);
}
inline bool Envelope_Type_Parse(
    const ::std::string& name, Envelope_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Envelope_Type>(
    Envelope_Type_descriptor(), name, value);
}
enum DataMessage_Flags {
  DataMessage_Flags_END_SESSION = 1,
  DataMessage_Flags_EXPIRATION_TIMER_UPDATE = 2
};
bool DataMessage_Flags_IsValid(int value);
const DataMessage_Flags DataMessage_Flags_Flags_MIN = DataMessage_Flags_END_SESSION;
const DataMessage_Flags DataMessage_Flags_Flags_MAX = DataMessage_Flags_EXPIRATION_TIMER_UPDATE;
const int DataMessage_Flags_Flags_ARRAYSIZE = DataMessage_Flags_Flags_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataMessage_Flags_descriptor();
inline const ::std::string& DataMessage_Flags_Name(DataMessage_Flags value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataMessage_Flags_descriptor(), value);
}
inline bool DataMessage_Flags_Parse(
    const ::std::string& name, DataMessage_Flags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataMessage_Flags>(
    DataMessage_Flags_descriptor(), name, value);
}
enum SyncMessage_Request_Type {
  SyncMessage_Request_Type_UNKNOWN = 0,
  SyncMessage_Request_Type_CONTACTS = 1,
  SyncMessage_Request_Type_GROUPS = 2,
  SyncMessage_Request_Type_BLOCKED = 3
};
bool SyncMessage_Request_Type_IsValid(int value);
const SyncMessage_Request_Type SyncMessage_Request_Type_Type_MIN = SyncMessage_Request_Type_UNKNOWN;
const SyncMessage_Request_Type SyncMessage_Request_Type_Type_MAX = SyncMessage_Request_Type_BLOCKED;
const int SyncMessage_Request_Type_Type_ARRAYSIZE = SyncMessage_Request_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* SyncMessage_Request_Type_descriptor();
inline const ::std::string& SyncMessage_Request_Type_Name(SyncMessage_Request_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    SyncMessage_Request_Type_descriptor(), value);
}
inline bool SyncMessage_Request_Type_Parse(
    const ::std::string& name, SyncMessage_Request_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SyncMessage_Request_Type>(
    SyncMessage_Request_Type_descriptor(), name, value);
}
enum GroupContext_Type {
  GroupContext_Type_UNKNOWN = 0,
  GroupContext_Type_UPDATE = 1,
  GroupContext_Type_DELIVER = 2,
  GroupContext_Type_QUIT = 3
};
bool GroupContext_Type_IsValid(int value);
const GroupContext_Type GroupContext_Type_Type_MIN = GroupContext_Type_UNKNOWN;
const GroupContext_Type GroupContext_Type_Type_MAX = GroupContext_Type_QUIT;
const int GroupContext_Type_Type_ARRAYSIZE = GroupContext_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* GroupContext_Type_descriptor();
inline const ::std::string& GroupContext_Type_Name(GroupContext_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    GroupContext_Type_descriptor(), value);
}
inline bool GroupContext_Type_Parse(
    const ::std::string& name, GroupContext_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GroupContext_Type>(
    GroupContext_Type_descriptor(), name, value);
}
// ===================================================================

class Envelope : public ::google::protobuf::Message {
 public:
  Envelope();
  virtual ~Envelope();

  Envelope(const Envelope& from);

  inline Envelope& operator=(const Envelope& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Envelope& default_instance();

  void Swap(Envelope* other);

  // implements Message ----------------------------------------------

  Envelope* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Envelope& from);
  void MergeFrom(const Envelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Envelope_Type Type;
  static const Type UNKNOWN = Envelope_Type_UNKNOWN;
  static const Type CIPHERTEXT = Envelope_Type_CIPHERTEXT;
  static const Type KEY_EXCHANGE = Envelope_Type_KEY_EXCHANGE;
  static const Type PREKEY_BUNDLE = Envelope_Type_PREKEY_BUNDLE;
  static const Type RECEIPT = Envelope_Type_RECEIPT;
  static inline bool Type_IsValid(int value) {
    return Envelope_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Envelope_Type_Type_MIN;
  static const Type Type_MAX =
    Envelope_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Envelope_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Envelope_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Envelope_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Envelope_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .textsecure.Envelope.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::textsecure::Envelope_Type type() const;
  inline void set_type(::textsecure::Envelope_Type value);

  // optional string source = 2;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 2;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional uint32 sourceDevice = 7;
  inline bool has_sourcedevice() const;
  inline void clear_sourcedevice();
  static const int kSourceDeviceFieldNumber = 7;
  inline ::google::protobuf::uint32 sourcedevice() const;
  inline void set_sourcedevice(::google::protobuf::uint32 value);

  // optional string relay = 3;
  inline bool has_relay() const;
  inline void clear_relay();
  static const int kRelayFieldNumber = 3;
  inline const ::std::string& relay() const;
  inline void set_relay(const ::std::string& value);
  inline void set_relay(const char* value);
  inline void set_relay(const char* value, size_t size);
  inline ::std::string* mutable_relay();
  inline ::std::string* release_relay();
  inline void set_allocated_relay(::std::string* relay);

  // optional uint64 timestamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // optional bytes legacyMessage = 6;
  inline bool has_legacymessage() const;
  inline void clear_legacymessage();
  static const int kLegacyMessageFieldNumber = 6;
  inline const ::std::string& legacymessage() const;
  inline void set_legacymessage(const ::std::string& value);
  inline void set_legacymessage(const char* value);
  inline void set_legacymessage(const void* value, size_t size);
  inline ::std::string* mutable_legacymessage();
  inline ::std::string* release_legacymessage();
  inline void set_allocated_legacymessage(::std::string* legacymessage);

  // optional bytes content = 8;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 8;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:textsecure.Envelope)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_sourcedevice();
  inline void clear_has_sourcedevice();
  inline void set_has_relay();
  inline void clear_has_relay();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_legacymessage();
  inline void clear_has_legacymessage();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* source_;
  int type_;
  ::google::protobuf::uint32 sourcedevice_;
  ::std::string* relay_;
  ::google::protobuf::uint64 timestamp_;
  ::std::string* legacymessage_;
  ::std::string* content_;
  friend void  protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_AssignDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_ShutdownFile_IncomingPushMessageSignal_2eproto();

  void InitAsDefaultInstance();
  static Envelope* default_instance_;
};
// -------------------------------------------------------------------

class Content : public ::google::protobuf::Message {
 public:
  Content();
  virtual ~Content();

  Content(const Content& from);

  inline Content& operator=(const Content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Content& default_instance();

  void Swap(Content* other);

  // implements Message ----------------------------------------------

  Content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Content& from);
  void MergeFrom(const Content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .textsecure.DataMessage dataMessage = 1;
  inline bool has_datamessage() const;
  inline void clear_datamessage();
  static const int kDataMessageFieldNumber = 1;
  inline const ::textsecure::DataMessage& datamessage() const;
  inline ::textsecure::DataMessage* mutable_datamessage();
  inline ::textsecure::DataMessage* release_datamessage();
  inline void set_allocated_datamessage(::textsecure::DataMessage* datamessage);

  // optional .textsecure.SyncMessage syncMessage = 2;
  inline bool has_syncmessage() const;
  inline void clear_syncmessage();
  static const int kSyncMessageFieldNumber = 2;
  inline const ::textsecure::SyncMessage& syncmessage() const;
  inline ::textsecure::SyncMessage* mutable_syncmessage();
  inline ::textsecure::SyncMessage* release_syncmessage();
  inline void set_allocated_syncmessage(::textsecure::SyncMessage* syncmessage);

  // @@protoc_insertion_point(class_scope:textsecure.Content)
 private:
  inline void set_has_datamessage();
  inline void clear_has_datamessage();
  inline void set_has_syncmessage();
  inline void clear_has_syncmessage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::textsecure::DataMessage* datamessage_;
  ::textsecure::SyncMessage* syncmessage_;
  friend void  protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_AssignDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_ShutdownFile_IncomingPushMessageSignal_2eproto();

  void InitAsDefaultInstance();
  static Content* default_instance_;
};
// -------------------------------------------------------------------

class DataMessage : public ::google::protobuf::Message {
 public:
  DataMessage();
  virtual ~DataMessage();

  DataMessage(const DataMessage& from);

  inline DataMessage& operator=(const DataMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataMessage& default_instance();

  void Swap(DataMessage* other);

  // implements Message ----------------------------------------------

  DataMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataMessage& from);
  void MergeFrom(const DataMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DataMessage_Flags Flags;
  static const Flags END_SESSION = DataMessage_Flags_END_SESSION;
  static const Flags EXPIRATION_TIMER_UPDATE = DataMessage_Flags_EXPIRATION_TIMER_UPDATE;
  static inline bool Flags_IsValid(int value) {
    return DataMessage_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    DataMessage_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    DataMessage_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    DataMessage_Flags_Flags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Flags_descriptor() {
    return DataMessage_Flags_descriptor();
  }
  static inline const ::std::string& Flags_Name(Flags value) {
    return DataMessage_Flags_Name(value);
  }
  static inline bool Flags_Parse(const ::std::string& name,
      Flags* value) {
    return DataMessage_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string body = 1;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 1;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const char* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // repeated .textsecure.AttachmentPointer attachments = 2;
  inline int attachments_size() const;
  inline void clear_attachments();
  static const int kAttachmentsFieldNumber = 2;
  inline const ::textsecure::AttachmentPointer& attachments(int index) const;
  inline ::textsecure::AttachmentPointer* mutable_attachments(int index);
  inline ::textsecure::AttachmentPointer* add_attachments();
  inline const ::google::protobuf::RepeatedPtrField< ::textsecure::AttachmentPointer >&
      attachments() const;
  inline ::google::protobuf::RepeatedPtrField< ::textsecure::AttachmentPointer >*
      mutable_attachments();

  // optional .textsecure.GroupContext group = 3;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 3;
  inline const ::textsecure::GroupContext& group() const;
  inline ::textsecure::GroupContext* mutable_group();
  inline ::textsecure::GroupContext* release_group();
  inline void set_allocated_group(::textsecure::GroupContext* group);

  // optional uint32 flags = 4;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 4;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // optional uint32 expireTimer = 5;
  inline bool has_expiretimer() const;
  inline void clear_expiretimer();
  static const int kExpireTimerFieldNumber = 5;
  inline ::google::protobuf::uint32 expiretimer() const;
  inline void set_expiretimer(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:textsecure.DataMessage)
 private:
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_expiretimer();
  inline void clear_has_expiretimer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* body_;
  ::google::protobuf::RepeatedPtrField< ::textsecure::AttachmentPointer > attachments_;
  ::textsecure::GroupContext* group_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 expiretimer_;
  friend void  protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_AssignDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_ShutdownFile_IncomingPushMessageSignal_2eproto();

  void InitAsDefaultInstance();
  static DataMessage* default_instance_;
};
// -------------------------------------------------------------------

class SyncMessage_Sent : public ::google::protobuf::Message {
 public:
  SyncMessage_Sent();
  virtual ~SyncMessage_Sent();

  SyncMessage_Sent(const SyncMessage_Sent& from);

  inline SyncMessage_Sent& operator=(const SyncMessage_Sent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncMessage_Sent& default_instance();

  void Swap(SyncMessage_Sent* other);

  // implements Message ----------------------------------------------

  SyncMessage_Sent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncMessage_Sent& from);
  void MergeFrom(const SyncMessage_Sent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string destination = 1;
  inline bool has_destination() const;
  inline void clear_destination();
  static const int kDestinationFieldNumber = 1;
  inline const ::std::string& destination() const;
  inline void set_destination(const ::std::string& value);
  inline void set_destination(const char* value);
  inline void set_destination(const char* value, size_t size);
  inline ::std::string* mutable_destination();
  inline ::std::string* release_destination();
  inline void set_allocated_destination(::std::string* destination);

  // optional uint64 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // optional .textsecure.DataMessage message = 3;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  inline const ::textsecure::DataMessage& message() const;
  inline ::textsecure::DataMessage* mutable_message();
  inline ::textsecure::DataMessage* release_message();
  inline void set_allocated_message(::textsecure::DataMessage* message);

  // optional uint64 expirationStartTimestamp = 4;
  inline bool has_expirationstarttimestamp() const;
  inline void clear_expirationstarttimestamp();
  static const int kExpirationStartTimestampFieldNumber = 4;
  inline ::google::protobuf::uint64 expirationstarttimestamp() const;
  inline void set_expirationstarttimestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:textsecure.SyncMessage.Sent)
 private:
  inline void set_has_destination();
  inline void clear_has_destination();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_expirationstarttimestamp();
  inline void clear_has_expirationstarttimestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* destination_;
  ::google::protobuf::uint64 timestamp_;
  ::textsecure::DataMessage* message_;
  ::google::protobuf::uint64 expirationstarttimestamp_;
  friend void  protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_AssignDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_ShutdownFile_IncomingPushMessageSignal_2eproto();

  void InitAsDefaultInstance();
  static SyncMessage_Sent* default_instance_;
};
// -------------------------------------------------------------------

class SyncMessage_Contacts : public ::google::protobuf::Message {
 public:
  SyncMessage_Contacts();
  virtual ~SyncMessage_Contacts();

  SyncMessage_Contacts(const SyncMessage_Contacts& from);

  inline SyncMessage_Contacts& operator=(const SyncMessage_Contacts& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncMessage_Contacts& default_instance();

  void Swap(SyncMessage_Contacts* other);

  // implements Message ----------------------------------------------

  SyncMessage_Contacts* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncMessage_Contacts& from);
  void MergeFrom(const SyncMessage_Contacts& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .textsecure.AttachmentPointer blob = 1;
  inline bool has_blob() const;
  inline void clear_blob();
  static const int kBlobFieldNumber = 1;
  inline const ::textsecure::AttachmentPointer& blob() const;
  inline ::textsecure::AttachmentPointer* mutable_blob();
  inline ::textsecure::AttachmentPointer* release_blob();
  inline void set_allocated_blob(::textsecure::AttachmentPointer* blob);

  // @@protoc_insertion_point(class_scope:textsecure.SyncMessage.Contacts)
 private:
  inline void set_has_blob();
  inline void clear_has_blob();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::textsecure::AttachmentPointer* blob_;
  friend void  protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_AssignDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_ShutdownFile_IncomingPushMessageSignal_2eproto();

  void InitAsDefaultInstance();
  static SyncMessage_Contacts* default_instance_;
};
// -------------------------------------------------------------------

class SyncMessage_Groups : public ::google::protobuf::Message {
 public:
  SyncMessage_Groups();
  virtual ~SyncMessage_Groups();

  SyncMessage_Groups(const SyncMessage_Groups& from);

  inline SyncMessage_Groups& operator=(const SyncMessage_Groups& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncMessage_Groups& default_instance();

  void Swap(SyncMessage_Groups* other);

  // implements Message ----------------------------------------------

  SyncMessage_Groups* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncMessage_Groups& from);
  void MergeFrom(const SyncMessage_Groups& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .textsecure.AttachmentPointer blob = 1;
  inline bool has_blob() const;
  inline void clear_blob();
  static const int kBlobFieldNumber = 1;
  inline const ::textsecure::AttachmentPointer& blob() const;
  inline ::textsecure::AttachmentPointer* mutable_blob();
  inline ::textsecure::AttachmentPointer* release_blob();
  inline void set_allocated_blob(::textsecure::AttachmentPointer* blob);

  // @@protoc_insertion_point(class_scope:textsecure.SyncMessage.Groups)
 private:
  inline void set_has_blob();
  inline void clear_has_blob();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::textsecure::AttachmentPointer* blob_;
  friend void  protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_AssignDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_ShutdownFile_IncomingPushMessageSignal_2eproto();

  void InitAsDefaultInstance();
  static SyncMessage_Groups* default_instance_;
};
// -------------------------------------------------------------------

class SyncMessage_Blocked : public ::google::protobuf::Message {
 public:
  SyncMessage_Blocked();
  virtual ~SyncMessage_Blocked();

  SyncMessage_Blocked(const SyncMessage_Blocked& from);

  inline SyncMessage_Blocked& operator=(const SyncMessage_Blocked& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncMessage_Blocked& default_instance();

  void Swap(SyncMessage_Blocked* other);

  // implements Message ----------------------------------------------

  SyncMessage_Blocked* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncMessage_Blocked& from);
  void MergeFrom(const SyncMessage_Blocked& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string numbers = 1;
  inline int numbers_size() const;
  inline void clear_numbers();
  static const int kNumbersFieldNumber = 1;
  inline const ::std::string& numbers(int index) const;
  inline ::std::string* mutable_numbers(int index);
  inline void set_numbers(int index, const ::std::string& value);
  inline void set_numbers(int index, const char* value);
  inline void set_numbers(int index, const char* value, size_t size);
  inline ::std::string* add_numbers();
  inline void add_numbers(const ::std::string& value);
  inline void add_numbers(const char* value);
  inline void add_numbers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& numbers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_numbers();

  // @@protoc_insertion_point(class_scope:textsecure.SyncMessage.Blocked)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> numbers_;
  friend void  protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_AssignDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_ShutdownFile_IncomingPushMessageSignal_2eproto();

  void InitAsDefaultInstance();
  static SyncMessage_Blocked* default_instance_;
};
// -------------------------------------------------------------------

class SyncMessage_Request : public ::google::protobuf::Message {
 public:
  SyncMessage_Request();
  virtual ~SyncMessage_Request();

  SyncMessage_Request(const SyncMessage_Request& from);

  inline SyncMessage_Request& operator=(const SyncMessage_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncMessage_Request& default_instance();

  void Swap(SyncMessage_Request* other);

  // implements Message ----------------------------------------------

  SyncMessage_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncMessage_Request& from);
  void MergeFrom(const SyncMessage_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SyncMessage_Request_Type Type;
  static const Type UNKNOWN = SyncMessage_Request_Type_UNKNOWN;
  static const Type CONTACTS = SyncMessage_Request_Type_CONTACTS;
  static const Type GROUPS = SyncMessage_Request_Type_GROUPS;
  static const Type BLOCKED = SyncMessage_Request_Type_BLOCKED;
  static inline bool Type_IsValid(int value) {
    return SyncMessage_Request_Type_IsValid(value);
  }
  static const Type Type_MIN =
    SyncMessage_Request_Type_Type_MIN;
  static const Type Type_MAX =
    SyncMessage_Request_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    SyncMessage_Request_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return SyncMessage_Request_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return SyncMessage_Request_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return SyncMessage_Request_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .textsecure.SyncMessage.Request.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::textsecure::SyncMessage_Request_Type type() const;
  inline void set_type(::textsecure::SyncMessage_Request_Type value);

  // @@protoc_insertion_point(class_scope:textsecure.SyncMessage.Request)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  friend void  protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_AssignDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_ShutdownFile_IncomingPushMessageSignal_2eproto();

  void InitAsDefaultInstance();
  static SyncMessage_Request* default_instance_;
};
// -------------------------------------------------------------------

class SyncMessage_Read : public ::google::protobuf::Message {
 public:
  SyncMessage_Read();
  virtual ~SyncMessage_Read();

  SyncMessage_Read(const SyncMessage_Read& from);

  inline SyncMessage_Read& operator=(const SyncMessage_Read& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncMessage_Read& default_instance();

  void Swap(SyncMessage_Read* other);

  // implements Message ----------------------------------------------

  SyncMessage_Read* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncMessage_Read& from);
  void MergeFrom(const SyncMessage_Read& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sender = 1;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 1;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  inline void set_allocated_sender(::std::string* sender);

  // optional uint64 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:textsecure.SyncMessage.Read)
 private:
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sender_;
  ::google::protobuf::uint64 timestamp_;
  friend void  protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_AssignDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_ShutdownFile_IncomingPushMessageSignal_2eproto();

  void InitAsDefaultInstance();
  static SyncMessage_Read* default_instance_;
};
// -------------------------------------------------------------------

class SyncMessage : public ::google::protobuf::Message {
 public:
  SyncMessage();
  virtual ~SyncMessage();

  SyncMessage(const SyncMessage& from);

  inline SyncMessage& operator=(const SyncMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncMessage& default_instance();

  void Swap(SyncMessage* other);

  // implements Message ----------------------------------------------

  SyncMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncMessage& from);
  void MergeFrom(const SyncMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SyncMessage_Sent Sent;
  typedef SyncMessage_Contacts Contacts;
  typedef SyncMessage_Groups Groups;
  typedef SyncMessage_Blocked Blocked;
  typedef SyncMessage_Request Request;
  typedef SyncMessage_Read Read;

  // accessors -------------------------------------------------------

  // optional .textsecure.SyncMessage.Sent sent = 1;
  inline bool has_sent() const;
  inline void clear_sent();
  static const int kSentFieldNumber = 1;
  inline const ::textsecure::SyncMessage_Sent& sent() const;
  inline ::textsecure::SyncMessage_Sent* mutable_sent();
  inline ::textsecure::SyncMessage_Sent* release_sent();
  inline void set_allocated_sent(::textsecure::SyncMessage_Sent* sent);

  // optional .textsecure.SyncMessage.Contacts contacts = 2;
  inline bool has_contacts() const;
  inline void clear_contacts();
  static const int kContactsFieldNumber = 2;
  inline const ::textsecure::SyncMessage_Contacts& contacts() const;
  inline ::textsecure::SyncMessage_Contacts* mutable_contacts();
  inline ::textsecure::SyncMessage_Contacts* release_contacts();
  inline void set_allocated_contacts(::textsecure::SyncMessage_Contacts* contacts);

  // optional .textsecure.SyncMessage.Groups groups = 3;
  inline bool has_groups() const;
  inline void clear_groups();
  static const int kGroupsFieldNumber = 3;
  inline const ::textsecure::SyncMessage_Groups& groups() const;
  inline ::textsecure::SyncMessage_Groups* mutable_groups();
  inline ::textsecure::SyncMessage_Groups* release_groups();
  inline void set_allocated_groups(::textsecure::SyncMessage_Groups* groups);

  // optional .textsecure.SyncMessage.Request request = 4;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 4;
  inline const ::textsecure::SyncMessage_Request& request() const;
  inline ::textsecure::SyncMessage_Request* mutable_request();
  inline ::textsecure::SyncMessage_Request* release_request();
  inline void set_allocated_request(::textsecure::SyncMessage_Request* request);

  // repeated .textsecure.SyncMessage.Read read = 5;
  inline int read_size() const;
  inline void clear_read();
  static const int kReadFieldNumber = 5;
  inline const ::textsecure::SyncMessage_Read& read(int index) const;
  inline ::textsecure::SyncMessage_Read* mutable_read(int index);
  inline ::textsecure::SyncMessage_Read* add_read();
  inline const ::google::protobuf::RepeatedPtrField< ::textsecure::SyncMessage_Read >&
      read() const;
  inline ::google::protobuf::RepeatedPtrField< ::textsecure::SyncMessage_Read >*
      mutable_read();

  // optional .textsecure.SyncMessage.Blocked blocked = 6;
  inline bool has_blocked() const;
  inline void clear_blocked();
  static const int kBlockedFieldNumber = 6;
  inline const ::textsecure::SyncMessage_Blocked& blocked() const;
  inline ::textsecure::SyncMessage_Blocked* mutable_blocked();
  inline ::textsecure::SyncMessage_Blocked* release_blocked();
  inline void set_allocated_blocked(::textsecure::SyncMessage_Blocked* blocked);

  // @@protoc_insertion_point(class_scope:textsecure.SyncMessage)
 private:
  inline void set_has_sent();
  inline void clear_has_sent();
  inline void set_has_contacts();
  inline void clear_has_contacts();
  inline void set_has_groups();
  inline void clear_has_groups();
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_blocked();
  inline void clear_has_blocked();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::textsecure::SyncMessage_Sent* sent_;
  ::textsecure::SyncMessage_Contacts* contacts_;
  ::textsecure::SyncMessage_Groups* groups_;
  ::textsecure::SyncMessage_Request* request_;
  ::google::protobuf::RepeatedPtrField< ::textsecure::SyncMessage_Read > read_;
  ::textsecure::SyncMessage_Blocked* blocked_;
  friend void  protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_AssignDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_ShutdownFile_IncomingPushMessageSignal_2eproto();

  void InitAsDefaultInstance();
  static SyncMessage* default_instance_;
};
// -------------------------------------------------------------------

class AttachmentPointer : public ::google::protobuf::Message {
 public:
  AttachmentPointer();
  virtual ~AttachmentPointer();

  AttachmentPointer(const AttachmentPointer& from);

  inline AttachmentPointer& operator=(const AttachmentPointer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttachmentPointer& default_instance();

  void Swap(AttachmentPointer* other);

  // implements Message ----------------------------------------------

  AttachmentPointer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttachmentPointer& from);
  void MergeFrom(const AttachmentPointer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string contentType = 2;
  inline bool has_contenttype() const;
  inline void clear_contenttype();
  static const int kContentTypeFieldNumber = 2;
  inline const ::std::string& contenttype() const;
  inline void set_contenttype(const ::std::string& value);
  inline void set_contenttype(const char* value);
  inline void set_contenttype(const char* value, size_t size);
  inline ::std::string* mutable_contenttype();
  inline ::std::string* release_contenttype();
  inline void set_allocated_contenttype(::std::string* contenttype);

  // optional bytes key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:textsecure.AttachmentPointer)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_contenttype();
  inline void clear_has_contenttype();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::std::string* contenttype_;
  ::std::string* key_;
  friend void  protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_AssignDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_ShutdownFile_IncomingPushMessageSignal_2eproto();

  void InitAsDefaultInstance();
  static AttachmentPointer* default_instance_;
};
// -------------------------------------------------------------------

class GroupContext : public ::google::protobuf::Message {
 public:
  GroupContext();
  virtual ~GroupContext();

  GroupContext(const GroupContext& from);

  inline GroupContext& operator=(const GroupContext& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupContext& default_instance();

  void Swap(GroupContext* other);

  // implements Message ----------------------------------------------

  GroupContext* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupContext& from);
  void MergeFrom(const GroupContext& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GroupContext_Type Type;
  static const Type UNKNOWN = GroupContext_Type_UNKNOWN;
  static const Type UPDATE = GroupContext_Type_UPDATE;
  static const Type DELIVER = GroupContext_Type_DELIVER;
  static const Type QUIT = GroupContext_Type_QUIT;
  static inline bool Type_IsValid(int value) {
    return GroupContext_Type_IsValid(value);
  }
  static const Type Type_MIN =
    GroupContext_Type_Type_MIN;
  static const Type Type_MAX =
    GroupContext_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    GroupContext_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return GroupContext_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return GroupContext_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return GroupContext_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional .textsecure.GroupContext.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::textsecure::GroupContext_Type type() const;
  inline void set_type(::textsecure::GroupContext_Type value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string members = 4;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 4;
  inline const ::std::string& members(int index) const;
  inline ::std::string* mutable_members(int index);
  inline void set_members(int index, const ::std::string& value);
  inline void set_members(int index, const char* value);
  inline void set_members(int index, const char* value, size_t size);
  inline ::std::string* add_members();
  inline void add_members(const ::std::string& value);
  inline void add_members(const char* value);
  inline void add_members(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& members() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_members();

  // optional .textsecure.AttachmentPointer avatar = 5;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 5;
  inline const ::textsecure::AttachmentPointer& avatar() const;
  inline ::textsecure::AttachmentPointer* mutable_avatar();
  inline ::textsecure::AttachmentPointer* release_avatar();
  inline void set_allocated_avatar(::textsecure::AttachmentPointer* avatar);

  // @@protoc_insertion_point(class_scope:textsecure.GroupContext)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_avatar();
  inline void clear_has_avatar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> members_;
  ::textsecure::AttachmentPointer* avatar_;
  int type_;
  friend void  protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_AssignDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_ShutdownFile_IncomingPushMessageSignal_2eproto();

  void InitAsDefaultInstance();
  static GroupContext* default_instance_;
};
// -------------------------------------------------------------------

class Avatar : public ::google::protobuf::Message {
 public:
  Avatar();
  virtual ~Avatar();

  Avatar(const Avatar& from);

  inline Avatar& operator=(const Avatar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Avatar& default_instance();

  void Swap(Avatar* other);

  // implements Message ----------------------------------------------

  Avatar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Avatar& from);
  void MergeFrom(const Avatar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string contentType = 1;
  inline bool has_contenttype() const;
  inline void clear_contenttype();
  static const int kContentTypeFieldNumber = 1;
  inline const ::std::string& contenttype() const;
  inline void set_contenttype(const ::std::string& value);
  inline void set_contenttype(const char* value);
  inline void set_contenttype(const char* value, size_t size);
  inline ::std::string* mutable_contenttype();
  inline ::std::string* release_contenttype();
  inline void set_allocated_contenttype(::std::string* contenttype);

  // optional uint32 length = 2;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 2;
  inline ::google::protobuf::uint32 length() const;
  inline void set_length(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:textsecure.Avatar)
 private:
  inline void set_has_contenttype();
  inline void clear_has_contenttype();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* contenttype_;
  ::google::protobuf::uint32 length_;
  friend void  protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_AssignDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_ShutdownFile_IncomingPushMessageSignal_2eproto();

  void InitAsDefaultInstance();
  static Avatar* default_instance_;
};
// -------------------------------------------------------------------

class GroupDetails : public ::google::protobuf::Message {
 public:
  GroupDetails();
  virtual ~GroupDetails();

  GroupDetails(const GroupDetails& from);

  inline GroupDetails& operator=(const GroupDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupDetails& default_instance();

  void Swap(GroupDetails* other);

  // implements Message ----------------------------------------------

  GroupDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupDetails& from);
  void MergeFrom(const GroupDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string members = 3;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 3;
  inline const ::std::string& members(int index) const;
  inline ::std::string* mutable_members(int index);
  inline void set_members(int index, const ::std::string& value);
  inline void set_members(int index, const char* value);
  inline void set_members(int index, const char* value, size_t size);
  inline ::std::string* add_members();
  inline void add_members(const ::std::string& value);
  inline void add_members(const char* value);
  inline void add_members(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& members() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_members();

  // optional .textsecure.Avatar avatar = 4;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 4;
  inline const ::textsecure::Avatar& avatar() const;
  inline ::textsecure::Avatar* mutable_avatar();
  inline ::textsecure::Avatar* release_avatar();
  inline void set_allocated_avatar(::textsecure::Avatar* avatar);

  // optional bool active = 5 [default = true];
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 5;
  inline bool active() const;
  inline void set_active(bool value);

  // @@protoc_insertion_point(class_scope:textsecure.GroupDetails)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_active();
  inline void clear_has_active();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> members_;
  ::textsecure::Avatar* avatar_;
  bool active_;
  friend void  protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_AssignDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_ShutdownFile_IncomingPushMessageSignal_2eproto();

  void InitAsDefaultInstance();
  static GroupDetails* default_instance_;
};
// -------------------------------------------------------------------

class ContactDetails : public ::google::protobuf::Message {
 public:
  ContactDetails();
  virtual ~ContactDetails();

  ContactDetails(const ContactDetails& from);

  inline ContactDetails& operator=(const ContactDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContactDetails& default_instance();

  void Swap(ContactDetails* other);

  // implements Message ----------------------------------------------

  ContactDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContactDetails& from);
  void MergeFrom(const ContactDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  inline void set_allocated_number(::std::string* number);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .textsecure.Avatar avatar = 3;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 3;
  inline const ::textsecure::Avatar& avatar() const;
  inline ::textsecure::Avatar* mutable_avatar();
  inline ::textsecure::Avatar* release_avatar();
  inline void set_allocated_avatar(::textsecure::Avatar* avatar);

  // optional string color = 4;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 4;
  inline const ::std::string& color() const;
  inline void set_color(const ::std::string& value);
  inline void set_color(const char* value);
  inline void set_color(const char* value, size_t size);
  inline ::std::string* mutable_color();
  inline ::std::string* release_color();
  inline void set_allocated_color(::std::string* color);

  // @@protoc_insertion_point(class_scope:textsecure.ContactDetails)
 private:
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* number_;
  ::std::string* name_;
  ::textsecure::Avatar* avatar_;
  ::std::string* color_;
  friend void  protobuf_AddDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_AssignDesc_IncomingPushMessageSignal_2eproto();
  friend void protobuf_ShutdownFile_IncomingPushMessageSignal_2eproto();

  void InitAsDefaultInstance();
  static ContactDetails* default_instance_;
};
// ===================================================================


// ===================================================================

// Envelope

// optional .textsecure.Envelope.Type type = 1;
inline bool Envelope::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Envelope::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Envelope::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Envelope::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::textsecure::Envelope_Type Envelope::type() const {
  // @@protoc_insertion_point(field_get:textsecure.Envelope.type)
  return static_cast< ::textsecure::Envelope_Type >(type_);
}
inline void Envelope::set_type(::textsecure::Envelope_Type value) {
  assert(::textsecure::Envelope_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:textsecure.Envelope.type)
}

// optional string source = 2;
inline bool Envelope::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Envelope::set_has_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Envelope::clear_has_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Envelope::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& Envelope::source() const {
  // @@protoc_insertion_point(field_get:textsecure.Envelope.source)
  return *source_;
}
inline void Envelope::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.Envelope.source)
}
inline void Envelope::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.Envelope.source)
}
inline void Envelope::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.Envelope.source)
}
inline ::std::string* Envelope::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.Envelope.source)
  return source_;
}
inline ::std::string* Envelope::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Envelope::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.Envelope.source)
}

// optional uint32 sourceDevice = 7;
inline bool Envelope::has_sourcedevice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Envelope::set_has_sourcedevice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Envelope::clear_has_sourcedevice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Envelope::clear_sourcedevice() {
  sourcedevice_ = 0u;
  clear_has_sourcedevice();
}
inline ::google::protobuf::uint32 Envelope::sourcedevice() const {
  // @@protoc_insertion_point(field_get:textsecure.Envelope.sourceDevice)
  return sourcedevice_;
}
inline void Envelope::set_sourcedevice(::google::protobuf::uint32 value) {
  set_has_sourcedevice();
  sourcedevice_ = value;
  // @@protoc_insertion_point(field_set:textsecure.Envelope.sourceDevice)
}

// optional string relay = 3;
inline bool Envelope::has_relay() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Envelope::set_has_relay() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Envelope::clear_has_relay() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Envelope::clear_relay() {
  if (relay_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relay_->clear();
  }
  clear_has_relay();
}
inline const ::std::string& Envelope::relay() const {
  // @@protoc_insertion_point(field_get:textsecure.Envelope.relay)
  return *relay_;
}
inline void Envelope::set_relay(const ::std::string& value) {
  set_has_relay();
  if (relay_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relay_ = new ::std::string;
  }
  relay_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.Envelope.relay)
}
inline void Envelope::set_relay(const char* value) {
  set_has_relay();
  if (relay_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relay_ = new ::std::string;
  }
  relay_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.Envelope.relay)
}
inline void Envelope::set_relay(const char* value, size_t size) {
  set_has_relay();
  if (relay_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relay_ = new ::std::string;
  }
  relay_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.Envelope.relay)
}
inline ::std::string* Envelope::mutable_relay() {
  set_has_relay();
  if (relay_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relay_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.Envelope.relay)
  return relay_;
}
inline ::std::string* Envelope::release_relay() {
  clear_has_relay();
  if (relay_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = relay_;
    relay_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Envelope::set_allocated_relay(::std::string* relay) {
  if (relay_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relay_;
  }
  if (relay) {
    set_has_relay();
    relay_ = relay;
  } else {
    clear_has_relay();
    relay_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.Envelope.relay)
}

// optional uint64 timestamp = 5;
inline bool Envelope::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Envelope::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Envelope::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Envelope::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 Envelope::timestamp() const {
  // @@protoc_insertion_point(field_get:textsecure.Envelope.timestamp)
  return timestamp_;
}
inline void Envelope::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:textsecure.Envelope.timestamp)
}

// optional bytes legacyMessage = 6;
inline bool Envelope::has_legacymessage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Envelope::set_has_legacymessage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Envelope::clear_has_legacymessage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Envelope::clear_legacymessage() {
  if (legacymessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    legacymessage_->clear();
  }
  clear_has_legacymessage();
}
inline const ::std::string& Envelope::legacymessage() const {
  // @@protoc_insertion_point(field_get:textsecure.Envelope.legacyMessage)
  return *legacymessage_;
}
inline void Envelope::set_legacymessage(const ::std::string& value) {
  set_has_legacymessage();
  if (legacymessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    legacymessage_ = new ::std::string;
  }
  legacymessage_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.Envelope.legacyMessage)
}
inline void Envelope::set_legacymessage(const char* value) {
  set_has_legacymessage();
  if (legacymessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    legacymessage_ = new ::std::string;
  }
  legacymessage_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.Envelope.legacyMessage)
}
inline void Envelope::set_legacymessage(const void* value, size_t size) {
  set_has_legacymessage();
  if (legacymessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    legacymessage_ = new ::std::string;
  }
  legacymessage_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.Envelope.legacyMessage)
}
inline ::std::string* Envelope::mutable_legacymessage() {
  set_has_legacymessage();
  if (legacymessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    legacymessage_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.Envelope.legacyMessage)
  return legacymessage_;
}
inline ::std::string* Envelope::release_legacymessage() {
  clear_has_legacymessage();
  if (legacymessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = legacymessage_;
    legacymessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Envelope::set_allocated_legacymessage(::std::string* legacymessage) {
  if (legacymessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete legacymessage_;
  }
  if (legacymessage) {
    set_has_legacymessage();
    legacymessage_ = legacymessage;
  } else {
    clear_has_legacymessage();
    legacymessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.Envelope.legacyMessage)
}

// optional bytes content = 8;
inline bool Envelope::has_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Envelope::set_has_content() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Envelope::clear_has_content() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Envelope::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Envelope::content() const {
  // @@protoc_insertion_point(field_get:textsecure.Envelope.content)
  return *content_;
}
inline void Envelope::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.Envelope.content)
}
inline void Envelope::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.Envelope.content)
}
inline void Envelope::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.Envelope.content)
}
inline ::std::string* Envelope::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.Envelope.content)
  return content_;
}
inline ::std::string* Envelope::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Envelope::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.Envelope.content)
}

// -------------------------------------------------------------------

// Content

// optional .textsecure.DataMessage dataMessage = 1;
inline bool Content::has_datamessage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Content::set_has_datamessage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Content::clear_has_datamessage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Content::clear_datamessage() {
  if (datamessage_ != NULL) datamessage_->::textsecure::DataMessage::Clear();
  clear_has_datamessage();
}
inline const ::textsecure::DataMessage& Content::datamessage() const {
  // @@protoc_insertion_point(field_get:textsecure.Content.dataMessage)
  return datamessage_ != NULL ? *datamessage_ : *default_instance_->datamessage_;
}
inline ::textsecure::DataMessage* Content::mutable_datamessage() {
  set_has_datamessage();
  if (datamessage_ == NULL) datamessage_ = new ::textsecure::DataMessage;
  // @@protoc_insertion_point(field_mutable:textsecure.Content.dataMessage)
  return datamessage_;
}
inline ::textsecure::DataMessage* Content::release_datamessage() {
  clear_has_datamessage();
  ::textsecure::DataMessage* temp = datamessage_;
  datamessage_ = NULL;
  return temp;
}
inline void Content::set_allocated_datamessage(::textsecure::DataMessage* datamessage) {
  delete datamessage_;
  datamessage_ = datamessage;
  if (datamessage) {
    set_has_datamessage();
  } else {
    clear_has_datamessage();
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.Content.dataMessage)
}

// optional .textsecure.SyncMessage syncMessage = 2;
inline bool Content::has_syncmessage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Content::set_has_syncmessage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Content::clear_has_syncmessage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Content::clear_syncmessage() {
  if (syncmessage_ != NULL) syncmessage_->::textsecure::SyncMessage::Clear();
  clear_has_syncmessage();
}
inline const ::textsecure::SyncMessage& Content::syncmessage() const {
  // @@protoc_insertion_point(field_get:textsecure.Content.syncMessage)
  return syncmessage_ != NULL ? *syncmessage_ : *default_instance_->syncmessage_;
}
inline ::textsecure::SyncMessage* Content::mutable_syncmessage() {
  set_has_syncmessage();
  if (syncmessage_ == NULL) syncmessage_ = new ::textsecure::SyncMessage;
  // @@protoc_insertion_point(field_mutable:textsecure.Content.syncMessage)
  return syncmessage_;
}
inline ::textsecure::SyncMessage* Content::release_syncmessage() {
  clear_has_syncmessage();
  ::textsecure::SyncMessage* temp = syncmessage_;
  syncmessage_ = NULL;
  return temp;
}
inline void Content::set_allocated_syncmessage(::textsecure::SyncMessage* syncmessage) {
  delete syncmessage_;
  syncmessage_ = syncmessage;
  if (syncmessage) {
    set_has_syncmessage();
  } else {
    clear_has_syncmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.Content.syncMessage)
}

// -------------------------------------------------------------------

// DataMessage

// optional string body = 1;
inline bool DataMessage::has_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataMessage::set_has_body() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataMessage::clear_has_body() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataMessage::clear_body() {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& DataMessage::body() const {
  // @@protoc_insertion_point(field_get:textsecure.DataMessage.body)
  return *body_;
}
inline void DataMessage::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.DataMessage.body)
}
inline void DataMessage::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.DataMessage.body)
}
inline void DataMessage::set_body(const char* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.DataMessage.body)
}
inline ::std::string* DataMessage::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.DataMessage.body)
  return body_;
}
inline ::std::string* DataMessage::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataMessage::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.DataMessage.body)
}

// repeated .textsecure.AttachmentPointer attachments = 2;
inline int DataMessage::attachments_size() const {
  return attachments_.size();
}
inline void DataMessage::clear_attachments() {
  attachments_.Clear();
}
inline const ::textsecure::AttachmentPointer& DataMessage::attachments(int index) const {
  // @@protoc_insertion_point(field_get:textsecure.DataMessage.attachments)
  return attachments_.Get(index);
}
inline ::textsecure::AttachmentPointer* DataMessage::mutable_attachments(int index) {
  // @@protoc_insertion_point(field_mutable:textsecure.DataMessage.attachments)
  return attachments_.Mutable(index);
}
inline ::textsecure::AttachmentPointer* DataMessage::add_attachments() {
  // @@protoc_insertion_point(field_add:textsecure.DataMessage.attachments)
  return attachments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::textsecure::AttachmentPointer >&
DataMessage::attachments() const {
  // @@protoc_insertion_point(field_list:textsecure.DataMessage.attachments)
  return attachments_;
}
inline ::google::protobuf::RepeatedPtrField< ::textsecure::AttachmentPointer >*
DataMessage::mutable_attachments() {
  // @@protoc_insertion_point(field_mutable_list:textsecure.DataMessage.attachments)
  return &attachments_;
}

// optional .textsecure.GroupContext group = 3;
inline bool DataMessage::has_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataMessage::set_has_group() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataMessage::clear_has_group() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataMessage::clear_group() {
  if (group_ != NULL) group_->::textsecure::GroupContext::Clear();
  clear_has_group();
}
inline const ::textsecure::GroupContext& DataMessage::group() const {
  // @@protoc_insertion_point(field_get:textsecure.DataMessage.group)
  return group_ != NULL ? *group_ : *default_instance_->group_;
}
inline ::textsecure::GroupContext* DataMessage::mutable_group() {
  set_has_group();
  if (group_ == NULL) group_ = new ::textsecure::GroupContext;
  // @@protoc_insertion_point(field_mutable:textsecure.DataMessage.group)
  return group_;
}
inline ::textsecure::GroupContext* DataMessage::release_group() {
  clear_has_group();
  ::textsecure::GroupContext* temp = group_;
  group_ = NULL;
  return temp;
}
inline void DataMessage::set_allocated_group(::textsecure::GroupContext* group) {
  delete group_;
  group_ = group;
  if (group) {
    set_has_group();
  } else {
    clear_has_group();
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.DataMessage.group)
}

// optional uint32 flags = 4;
inline bool DataMessage::has_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataMessage::set_has_flags() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataMessage::clear_has_flags() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataMessage::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 DataMessage::flags() const {
  // @@protoc_insertion_point(field_get:textsecure.DataMessage.flags)
  return flags_;
}
inline void DataMessage::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:textsecure.DataMessage.flags)
}

// optional uint32 expireTimer = 5;
inline bool DataMessage::has_expiretimer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataMessage::set_has_expiretimer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataMessage::clear_has_expiretimer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataMessage::clear_expiretimer() {
  expiretimer_ = 0u;
  clear_has_expiretimer();
}
inline ::google::protobuf::uint32 DataMessage::expiretimer() const {
  // @@protoc_insertion_point(field_get:textsecure.DataMessage.expireTimer)
  return expiretimer_;
}
inline void DataMessage::set_expiretimer(::google::protobuf::uint32 value) {
  set_has_expiretimer();
  expiretimer_ = value;
  // @@protoc_insertion_point(field_set:textsecure.DataMessage.expireTimer)
}

// -------------------------------------------------------------------

// SyncMessage_Sent

// optional string destination = 1;
inline bool SyncMessage_Sent::has_destination() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncMessage_Sent::set_has_destination() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncMessage_Sent::clear_has_destination() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncMessage_Sent::clear_destination() {
  if (destination_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    destination_->clear();
  }
  clear_has_destination();
}
inline const ::std::string& SyncMessage_Sent::destination() const {
  // @@protoc_insertion_point(field_get:textsecure.SyncMessage.Sent.destination)
  return *destination_;
}
inline void SyncMessage_Sent::set_destination(const ::std::string& value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.SyncMessage.Sent.destination)
}
inline void SyncMessage_Sent::set_destination(const char* value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.SyncMessage.Sent.destination)
}
inline void SyncMessage_Sent::set_destination(const char* value, size_t size) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    destination_ = new ::std::string;
  }
  destination_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.SyncMessage.Sent.destination)
}
inline ::std::string* SyncMessage_Sent::mutable_destination() {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    destination_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.SyncMessage.Sent.destination)
  return destination_;
}
inline ::std::string* SyncMessage_Sent::release_destination() {
  clear_has_destination();
  if (destination_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = destination_;
    destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SyncMessage_Sent::set_allocated_destination(::std::string* destination) {
  if (destination_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete destination_;
  }
  if (destination) {
    set_has_destination();
    destination_ = destination;
  } else {
    clear_has_destination();
    destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.SyncMessage.Sent.destination)
}

// optional uint64 timestamp = 2;
inline bool SyncMessage_Sent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncMessage_Sent::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncMessage_Sent::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncMessage_Sent::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 SyncMessage_Sent::timestamp() const {
  // @@protoc_insertion_point(field_get:textsecure.SyncMessage.Sent.timestamp)
  return timestamp_;
}
inline void SyncMessage_Sent::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:textsecure.SyncMessage.Sent.timestamp)
}

// optional .textsecure.DataMessage message = 3;
inline bool SyncMessage_Sent::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncMessage_Sent::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncMessage_Sent::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncMessage_Sent::clear_message() {
  if (message_ != NULL) message_->::textsecure::DataMessage::Clear();
  clear_has_message();
}
inline const ::textsecure::DataMessage& SyncMessage_Sent::message() const {
  // @@protoc_insertion_point(field_get:textsecure.SyncMessage.Sent.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::textsecure::DataMessage* SyncMessage_Sent::mutable_message() {
  set_has_message();
  if (message_ == NULL) message_ = new ::textsecure::DataMessage;
  // @@protoc_insertion_point(field_mutable:textsecure.SyncMessage.Sent.message)
  return message_;
}
inline ::textsecure::DataMessage* SyncMessage_Sent::release_message() {
  clear_has_message();
  ::textsecure::DataMessage* temp = message_;
  message_ = NULL;
  return temp;
}
inline void SyncMessage_Sent::set_allocated_message(::textsecure::DataMessage* message) {
  delete message_;
  message_ = message;
  if (message) {
    set_has_message();
  } else {
    clear_has_message();
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.SyncMessage.Sent.message)
}

// optional uint64 expirationStartTimestamp = 4;
inline bool SyncMessage_Sent::has_expirationstarttimestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncMessage_Sent::set_has_expirationstarttimestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SyncMessage_Sent::clear_has_expirationstarttimestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SyncMessage_Sent::clear_expirationstarttimestamp() {
  expirationstarttimestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_expirationstarttimestamp();
}
inline ::google::protobuf::uint64 SyncMessage_Sent::expirationstarttimestamp() const {
  // @@protoc_insertion_point(field_get:textsecure.SyncMessage.Sent.expirationStartTimestamp)
  return expirationstarttimestamp_;
}
inline void SyncMessage_Sent::set_expirationstarttimestamp(::google::protobuf::uint64 value) {
  set_has_expirationstarttimestamp();
  expirationstarttimestamp_ = value;
  // @@protoc_insertion_point(field_set:textsecure.SyncMessage.Sent.expirationStartTimestamp)
}

// -------------------------------------------------------------------

// SyncMessage_Contacts

// optional .textsecure.AttachmentPointer blob = 1;
inline bool SyncMessage_Contacts::has_blob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncMessage_Contacts::set_has_blob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncMessage_Contacts::clear_has_blob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncMessage_Contacts::clear_blob() {
  if (blob_ != NULL) blob_->::textsecure::AttachmentPointer::Clear();
  clear_has_blob();
}
inline const ::textsecure::AttachmentPointer& SyncMessage_Contacts::blob() const {
  // @@protoc_insertion_point(field_get:textsecure.SyncMessage.Contacts.blob)
  return blob_ != NULL ? *blob_ : *default_instance_->blob_;
}
inline ::textsecure::AttachmentPointer* SyncMessage_Contacts::mutable_blob() {
  set_has_blob();
  if (blob_ == NULL) blob_ = new ::textsecure::AttachmentPointer;
  // @@protoc_insertion_point(field_mutable:textsecure.SyncMessage.Contacts.blob)
  return blob_;
}
inline ::textsecure::AttachmentPointer* SyncMessage_Contacts::release_blob() {
  clear_has_blob();
  ::textsecure::AttachmentPointer* temp = blob_;
  blob_ = NULL;
  return temp;
}
inline void SyncMessage_Contacts::set_allocated_blob(::textsecure::AttachmentPointer* blob) {
  delete blob_;
  blob_ = blob;
  if (blob) {
    set_has_blob();
  } else {
    clear_has_blob();
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.SyncMessage.Contacts.blob)
}

// -------------------------------------------------------------------

// SyncMessage_Groups

// optional .textsecure.AttachmentPointer blob = 1;
inline bool SyncMessage_Groups::has_blob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncMessage_Groups::set_has_blob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncMessage_Groups::clear_has_blob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncMessage_Groups::clear_blob() {
  if (blob_ != NULL) blob_->::textsecure::AttachmentPointer::Clear();
  clear_has_blob();
}
inline const ::textsecure::AttachmentPointer& SyncMessage_Groups::blob() const {
  // @@protoc_insertion_point(field_get:textsecure.SyncMessage.Groups.blob)
  return blob_ != NULL ? *blob_ : *default_instance_->blob_;
}
inline ::textsecure::AttachmentPointer* SyncMessage_Groups::mutable_blob() {
  set_has_blob();
  if (blob_ == NULL) blob_ = new ::textsecure::AttachmentPointer;
  // @@protoc_insertion_point(field_mutable:textsecure.SyncMessage.Groups.blob)
  return blob_;
}
inline ::textsecure::AttachmentPointer* SyncMessage_Groups::release_blob() {
  clear_has_blob();
  ::textsecure::AttachmentPointer* temp = blob_;
  blob_ = NULL;
  return temp;
}
inline void SyncMessage_Groups::set_allocated_blob(::textsecure::AttachmentPointer* blob) {
  delete blob_;
  blob_ = blob;
  if (blob) {
    set_has_blob();
  } else {
    clear_has_blob();
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.SyncMessage.Groups.blob)
}

// -------------------------------------------------------------------

// SyncMessage_Blocked

// repeated string numbers = 1;
inline int SyncMessage_Blocked::numbers_size() const {
  return numbers_.size();
}
inline void SyncMessage_Blocked::clear_numbers() {
  numbers_.Clear();
}
inline const ::std::string& SyncMessage_Blocked::numbers(int index) const {
  // @@protoc_insertion_point(field_get:textsecure.SyncMessage.Blocked.numbers)
  return numbers_.Get(index);
}
inline ::std::string* SyncMessage_Blocked::mutable_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:textsecure.SyncMessage.Blocked.numbers)
  return numbers_.Mutable(index);
}
inline void SyncMessage_Blocked::set_numbers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:textsecure.SyncMessage.Blocked.numbers)
  numbers_.Mutable(index)->assign(value);
}
inline void SyncMessage_Blocked::set_numbers(int index, const char* value) {
  numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.SyncMessage.Blocked.numbers)
}
inline void SyncMessage_Blocked::set_numbers(int index, const char* value, size_t size) {
  numbers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.SyncMessage.Blocked.numbers)
}
inline ::std::string* SyncMessage_Blocked::add_numbers() {
  return numbers_.Add();
}
inline void SyncMessage_Blocked::add_numbers(const ::std::string& value) {
  numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:textsecure.SyncMessage.Blocked.numbers)
}
inline void SyncMessage_Blocked::add_numbers(const char* value) {
  numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:textsecure.SyncMessage.Blocked.numbers)
}
inline void SyncMessage_Blocked::add_numbers(const char* value, size_t size) {
  numbers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:textsecure.SyncMessage.Blocked.numbers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SyncMessage_Blocked::numbers() const {
  // @@protoc_insertion_point(field_list:textsecure.SyncMessage.Blocked.numbers)
  return numbers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SyncMessage_Blocked::mutable_numbers() {
  // @@protoc_insertion_point(field_mutable_list:textsecure.SyncMessage.Blocked.numbers)
  return &numbers_;
}

// -------------------------------------------------------------------

// SyncMessage_Request

// optional .textsecure.SyncMessage.Request.Type type = 1;
inline bool SyncMessage_Request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncMessage_Request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncMessage_Request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncMessage_Request::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::textsecure::SyncMessage_Request_Type SyncMessage_Request::type() const {
  // @@protoc_insertion_point(field_get:textsecure.SyncMessage.Request.type)
  return static_cast< ::textsecure::SyncMessage_Request_Type >(type_);
}
inline void SyncMessage_Request::set_type(::textsecure::SyncMessage_Request_Type value) {
  assert(::textsecure::SyncMessage_Request_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:textsecure.SyncMessage.Request.type)
}

// -------------------------------------------------------------------

// SyncMessage_Read

// optional string sender = 1;
inline bool SyncMessage_Read::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncMessage_Read::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncMessage_Read::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncMessage_Read::clear_sender() {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& SyncMessage_Read::sender() const {
  // @@protoc_insertion_point(field_get:textsecure.SyncMessage.Read.sender)
  return *sender_;
}
inline void SyncMessage_Read::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.SyncMessage.Read.sender)
}
inline void SyncMessage_Read::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.SyncMessage.Read.sender)
}
inline void SyncMessage_Read::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.SyncMessage.Read.sender)
}
inline ::std::string* SyncMessage_Read::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.SyncMessage.Read.sender)
  return sender_;
}
inline ::std::string* SyncMessage_Read::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SyncMessage_Read::set_allocated_sender(::std::string* sender) {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (sender) {
    set_has_sender();
    sender_ = sender;
  } else {
    clear_has_sender();
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.SyncMessage.Read.sender)
}

// optional uint64 timestamp = 2;
inline bool SyncMessage_Read::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncMessage_Read::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncMessage_Read::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncMessage_Read::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 SyncMessage_Read::timestamp() const {
  // @@protoc_insertion_point(field_get:textsecure.SyncMessage.Read.timestamp)
  return timestamp_;
}
inline void SyncMessage_Read::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:textsecure.SyncMessage.Read.timestamp)
}

// -------------------------------------------------------------------

// SyncMessage

// optional .textsecure.SyncMessage.Sent sent = 1;
inline bool SyncMessage::has_sent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncMessage::set_has_sent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncMessage::clear_has_sent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncMessage::clear_sent() {
  if (sent_ != NULL) sent_->::textsecure::SyncMessage_Sent::Clear();
  clear_has_sent();
}
inline const ::textsecure::SyncMessage_Sent& SyncMessage::sent() const {
  // @@protoc_insertion_point(field_get:textsecure.SyncMessage.sent)
  return sent_ != NULL ? *sent_ : *default_instance_->sent_;
}
inline ::textsecure::SyncMessage_Sent* SyncMessage::mutable_sent() {
  set_has_sent();
  if (sent_ == NULL) sent_ = new ::textsecure::SyncMessage_Sent;
  // @@protoc_insertion_point(field_mutable:textsecure.SyncMessage.sent)
  return sent_;
}
inline ::textsecure::SyncMessage_Sent* SyncMessage::release_sent() {
  clear_has_sent();
  ::textsecure::SyncMessage_Sent* temp = sent_;
  sent_ = NULL;
  return temp;
}
inline void SyncMessage::set_allocated_sent(::textsecure::SyncMessage_Sent* sent) {
  delete sent_;
  sent_ = sent;
  if (sent) {
    set_has_sent();
  } else {
    clear_has_sent();
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.SyncMessage.sent)
}

// optional .textsecure.SyncMessage.Contacts contacts = 2;
inline bool SyncMessage::has_contacts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncMessage::set_has_contacts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncMessage::clear_has_contacts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncMessage::clear_contacts() {
  if (contacts_ != NULL) contacts_->::textsecure::SyncMessage_Contacts::Clear();
  clear_has_contacts();
}
inline const ::textsecure::SyncMessage_Contacts& SyncMessage::contacts() const {
  // @@protoc_insertion_point(field_get:textsecure.SyncMessage.contacts)
  return contacts_ != NULL ? *contacts_ : *default_instance_->contacts_;
}
inline ::textsecure::SyncMessage_Contacts* SyncMessage::mutable_contacts() {
  set_has_contacts();
  if (contacts_ == NULL) contacts_ = new ::textsecure::SyncMessage_Contacts;
  // @@protoc_insertion_point(field_mutable:textsecure.SyncMessage.contacts)
  return contacts_;
}
inline ::textsecure::SyncMessage_Contacts* SyncMessage::release_contacts() {
  clear_has_contacts();
  ::textsecure::SyncMessage_Contacts* temp = contacts_;
  contacts_ = NULL;
  return temp;
}
inline void SyncMessage::set_allocated_contacts(::textsecure::SyncMessage_Contacts* contacts) {
  delete contacts_;
  contacts_ = contacts;
  if (contacts) {
    set_has_contacts();
  } else {
    clear_has_contacts();
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.SyncMessage.contacts)
}

// optional .textsecure.SyncMessage.Groups groups = 3;
inline bool SyncMessage::has_groups() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncMessage::set_has_groups() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncMessage::clear_has_groups() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncMessage::clear_groups() {
  if (groups_ != NULL) groups_->::textsecure::SyncMessage_Groups::Clear();
  clear_has_groups();
}
inline const ::textsecure::SyncMessage_Groups& SyncMessage::groups() const {
  // @@protoc_insertion_point(field_get:textsecure.SyncMessage.groups)
  return groups_ != NULL ? *groups_ : *default_instance_->groups_;
}
inline ::textsecure::SyncMessage_Groups* SyncMessage::mutable_groups() {
  set_has_groups();
  if (groups_ == NULL) groups_ = new ::textsecure::SyncMessage_Groups;
  // @@protoc_insertion_point(field_mutable:textsecure.SyncMessage.groups)
  return groups_;
}
inline ::textsecure::SyncMessage_Groups* SyncMessage::release_groups() {
  clear_has_groups();
  ::textsecure::SyncMessage_Groups* temp = groups_;
  groups_ = NULL;
  return temp;
}
inline void SyncMessage::set_allocated_groups(::textsecure::SyncMessage_Groups* groups) {
  delete groups_;
  groups_ = groups;
  if (groups) {
    set_has_groups();
  } else {
    clear_has_groups();
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.SyncMessage.groups)
}

// optional .textsecure.SyncMessage.Request request = 4;
inline bool SyncMessage::has_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncMessage::set_has_request() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SyncMessage::clear_has_request() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SyncMessage::clear_request() {
  if (request_ != NULL) request_->::textsecure::SyncMessage_Request::Clear();
  clear_has_request();
}
inline const ::textsecure::SyncMessage_Request& SyncMessage::request() const {
  // @@protoc_insertion_point(field_get:textsecure.SyncMessage.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::textsecure::SyncMessage_Request* SyncMessage::mutable_request() {
  set_has_request();
  if (request_ == NULL) request_ = new ::textsecure::SyncMessage_Request;
  // @@protoc_insertion_point(field_mutable:textsecure.SyncMessage.request)
  return request_;
}
inline ::textsecure::SyncMessage_Request* SyncMessage::release_request() {
  clear_has_request();
  ::textsecure::SyncMessage_Request* temp = request_;
  request_ = NULL;
  return temp;
}
inline void SyncMessage::set_allocated_request(::textsecure::SyncMessage_Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.SyncMessage.request)
}

// repeated .textsecure.SyncMessage.Read read = 5;
inline int SyncMessage::read_size() const {
  return read_.size();
}
inline void SyncMessage::clear_read() {
  read_.Clear();
}
inline const ::textsecure::SyncMessage_Read& SyncMessage::read(int index) const {
  // @@protoc_insertion_point(field_get:textsecure.SyncMessage.read)
  return read_.Get(index);
}
inline ::textsecure::SyncMessage_Read* SyncMessage::mutable_read(int index) {
  // @@protoc_insertion_point(field_mutable:textsecure.SyncMessage.read)
  return read_.Mutable(index);
}
inline ::textsecure::SyncMessage_Read* SyncMessage::add_read() {
  // @@protoc_insertion_point(field_add:textsecure.SyncMessage.read)
  return read_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::textsecure::SyncMessage_Read >&
SyncMessage::read() const {
  // @@protoc_insertion_point(field_list:textsecure.SyncMessage.read)
  return read_;
}
inline ::google::protobuf::RepeatedPtrField< ::textsecure::SyncMessage_Read >*
SyncMessage::mutable_read() {
  // @@protoc_insertion_point(field_mutable_list:textsecure.SyncMessage.read)
  return &read_;
}

// optional .textsecure.SyncMessage.Blocked blocked = 6;
inline bool SyncMessage::has_blocked() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SyncMessage::set_has_blocked() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SyncMessage::clear_has_blocked() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SyncMessage::clear_blocked() {
  if (blocked_ != NULL) blocked_->::textsecure::SyncMessage_Blocked::Clear();
  clear_has_blocked();
}
inline const ::textsecure::SyncMessage_Blocked& SyncMessage::blocked() const {
  // @@protoc_insertion_point(field_get:textsecure.SyncMessage.blocked)
  return blocked_ != NULL ? *blocked_ : *default_instance_->blocked_;
}
inline ::textsecure::SyncMessage_Blocked* SyncMessage::mutable_blocked() {
  set_has_blocked();
  if (blocked_ == NULL) blocked_ = new ::textsecure::SyncMessage_Blocked;
  // @@protoc_insertion_point(field_mutable:textsecure.SyncMessage.blocked)
  return blocked_;
}
inline ::textsecure::SyncMessage_Blocked* SyncMessage::release_blocked() {
  clear_has_blocked();
  ::textsecure::SyncMessage_Blocked* temp = blocked_;
  blocked_ = NULL;
  return temp;
}
inline void SyncMessage::set_allocated_blocked(::textsecure::SyncMessage_Blocked* blocked) {
  delete blocked_;
  blocked_ = blocked;
  if (blocked) {
    set_has_blocked();
  } else {
    clear_has_blocked();
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.SyncMessage.blocked)
}

// -------------------------------------------------------------------

// AttachmentPointer

// optional fixed64 id = 1;
inline bool AttachmentPointer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttachmentPointer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AttachmentPointer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AttachmentPointer::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 AttachmentPointer::id() const {
  // @@protoc_insertion_point(field_get:textsecure.AttachmentPointer.id)
  return id_;
}
inline void AttachmentPointer::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:textsecure.AttachmentPointer.id)
}

// optional string contentType = 2;
inline bool AttachmentPointer::has_contenttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AttachmentPointer::set_has_contenttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AttachmentPointer::clear_has_contenttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AttachmentPointer::clear_contenttype() {
  if (contenttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contenttype_->clear();
  }
  clear_has_contenttype();
}
inline const ::std::string& AttachmentPointer::contenttype() const {
  // @@protoc_insertion_point(field_get:textsecure.AttachmentPointer.contentType)
  return *contenttype_;
}
inline void AttachmentPointer::set_contenttype(const ::std::string& value) {
  set_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contenttype_ = new ::std::string;
  }
  contenttype_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.AttachmentPointer.contentType)
}
inline void AttachmentPointer::set_contenttype(const char* value) {
  set_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contenttype_ = new ::std::string;
  }
  contenttype_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.AttachmentPointer.contentType)
}
inline void AttachmentPointer::set_contenttype(const char* value, size_t size) {
  set_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contenttype_ = new ::std::string;
  }
  contenttype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.AttachmentPointer.contentType)
}
inline ::std::string* AttachmentPointer::mutable_contenttype() {
  set_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contenttype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.AttachmentPointer.contentType)
  return contenttype_;
}
inline ::std::string* AttachmentPointer::release_contenttype() {
  clear_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contenttype_;
    contenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AttachmentPointer::set_allocated_contenttype(::std::string* contenttype) {
  if (contenttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contenttype_;
  }
  if (contenttype) {
    set_has_contenttype();
    contenttype_ = contenttype;
  } else {
    clear_has_contenttype();
    contenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.AttachmentPointer.contentType)
}

// optional bytes key = 3;
inline bool AttachmentPointer::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AttachmentPointer::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AttachmentPointer::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AttachmentPointer::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& AttachmentPointer::key() const {
  // @@protoc_insertion_point(field_get:textsecure.AttachmentPointer.key)
  return *key_;
}
inline void AttachmentPointer::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.AttachmentPointer.key)
}
inline void AttachmentPointer::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.AttachmentPointer.key)
}
inline void AttachmentPointer::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.AttachmentPointer.key)
}
inline ::std::string* AttachmentPointer::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.AttachmentPointer.key)
  return key_;
}
inline ::std::string* AttachmentPointer::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AttachmentPointer::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.AttachmentPointer.key)
}

// -------------------------------------------------------------------

// GroupContext

// optional bytes id = 1;
inline bool GroupContext::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupContext::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupContext::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupContext::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& GroupContext::id() const {
  // @@protoc_insertion_point(field_get:textsecure.GroupContext.id)
  return *id_;
}
inline void GroupContext::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.GroupContext.id)
}
inline void GroupContext::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.GroupContext.id)
}
inline void GroupContext::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.GroupContext.id)
}
inline ::std::string* GroupContext::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.GroupContext.id)
  return id_;
}
inline ::std::string* GroupContext::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GroupContext::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.GroupContext.id)
}

// optional .textsecure.GroupContext.Type type = 2;
inline bool GroupContext::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupContext::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupContext::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupContext::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::textsecure::GroupContext_Type GroupContext::type() const {
  // @@protoc_insertion_point(field_get:textsecure.GroupContext.type)
  return static_cast< ::textsecure::GroupContext_Type >(type_);
}
inline void GroupContext::set_type(::textsecure::GroupContext_Type value) {
  assert(::textsecure::GroupContext_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:textsecure.GroupContext.type)
}

// optional string name = 3;
inline bool GroupContext::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupContext::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupContext::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupContext::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GroupContext::name() const {
  // @@protoc_insertion_point(field_get:textsecure.GroupContext.name)
  return *name_;
}
inline void GroupContext::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.GroupContext.name)
}
inline void GroupContext::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.GroupContext.name)
}
inline void GroupContext::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.GroupContext.name)
}
inline ::std::string* GroupContext::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.GroupContext.name)
  return name_;
}
inline ::std::string* GroupContext::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GroupContext::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.GroupContext.name)
}

// repeated string members = 4;
inline int GroupContext::members_size() const {
  return members_.size();
}
inline void GroupContext::clear_members() {
  members_.Clear();
}
inline const ::std::string& GroupContext::members(int index) const {
  // @@protoc_insertion_point(field_get:textsecure.GroupContext.members)
  return members_.Get(index);
}
inline ::std::string* GroupContext::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:textsecure.GroupContext.members)
  return members_.Mutable(index);
}
inline void GroupContext::set_members(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:textsecure.GroupContext.members)
  members_.Mutable(index)->assign(value);
}
inline void GroupContext::set_members(int index, const char* value) {
  members_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.GroupContext.members)
}
inline void GroupContext::set_members(int index, const char* value, size_t size) {
  members_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.GroupContext.members)
}
inline ::std::string* GroupContext::add_members() {
  return members_.Add();
}
inline void GroupContext::add_members(const ::std::string& value) {
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:textsecure.GroupContext.members)
}
inline void GroupContext::add_members(const char* value) {
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:textsecure.GroupContext.members)
}
inline void GroupContext::add_members(const char* value, size_t size) {
  members_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:textsecure.GroupContext.members)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GroupContext::members() const {
  // @@protoc_insertion_point(field_list:textsecure.GroupContext.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GroupContext::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:textsecure.GroupContext.members)
  return &members_;
}

// optional .textsecure.AttachmentPointer avatar = 5;
inline bool GroupContext::has_avatar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GroupContext::set_has_avatar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GroupContext::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GroupContext::clear_avatar() {
  if (avatar_ != NULL) avatar_->::textsecure::AttachmentPointer::Clear();
  clear_has_avatar();
}
inline const ::textsecure::AttachmentPointer& GroupContext::avatar() const {
  // @@protoc_insertion_point(field_get:textsecure.GroupContext.avatar)
  return avatar_ != NULL ? *avatar_ : *default_instance_->avatar_;
}
inline ::textsecure::AttachmentPointer* GroupContext::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == NULL) avatar_ = new ::textsecure::AttachmentPointer;
  // @@protoc_insertion_point(field_mutable:textsecure.GroupContext.avatar)
  return avatar_;
}
inline ::textsecure::AttachmentPointer* GroupContext::release_avatar() {
  clear_has_avatar();
  ::textsecure::AttachmentPointer* temp = avatar_;
  avatar_ = NULL;
  return temp;
}
inline void GroupContext::set_allocated_avatar(::textsecure::AttachmentPointer* avatar) {
  delete avatar_;
  avatar_ = avatar;
  if (avatar) {
    set_has_avatar();
  } else {
    clear_has_avatar();
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.GroupContext.avatar)
}

// -------------------------------------------------------------------

// Avatar

// optional string contentType = 1;
inline bool Avatar::has_contenttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Avatar::set_has_contenttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Avatar::clear_has_contenttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Avatar::clear_contenttype() {
  if (contenttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contenttype_->clear();
  }
  clear_has_contenttype();
}
inline const ::std::string& Avatar::contenttype() const {
  // @@protoc_insertion_point(field_get:textsecure.Avatar.contentType)
  return *contenttype_;
}
inline void Avatar::set_contenttype(const ::std::string& value) {
  set_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contenttype_ = new ::std::string;
  }
  contenttype_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.Avatar.contentType)
}
inline void Avatar::set_contenttype(const char* value) {
  set_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contenttype_ = new ::std::string;
  }
  contenttype_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.Avatar.contentType)
}
inline void Avatar::set_contenttype(const char* value, size_t size) {
  set_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contenttype_ = new ::std::string;
  }
  contenttype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.Avatar.contentType)
}
inline ::std::string* Avatar::mutable_contenttype() {
  set_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contenttype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.Avatar.contentType)
  return contenttype_;
}
inline ::std::string* Avatar::release_contenttype() {
  clear_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contenttype_;
    contenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Avatar::set_allocated_contenttype(::std::string* contenttype) {
  if (contenttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contenttype_;
  }
  if (contenttype) {
    set_has_contenttype();
    contenttype_ = contenttype;
  } else {
    clear_has_contenttype();
    contenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.Avatar.contentType)
}

// optional uint32 length = 2;
inline bool Avatar::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Avatar::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Avatar::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Avatar::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 Avatar::length() const {
  // @@protoc_insertion_point(field_get:textsecure.Avatar.length)
  return length_;
}
inline void Avatar::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:textsecure.Avatar.length)
}

// -------------------------------------------------------------------

// GroupDetails

// optional bytes id = 1;
inline bool GroupDetails::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupDetails::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupDetails::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupDetails::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& GroupDetails::id() const {
  // @@protoc_insertion_point(field_get:textsecure.GroupDetails.id)
  return *id_;
}
inline void GroupDetails::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.GroupDetails.id)
}
inline void GroupDetails::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.GroupDetails.id)
}
inline void GroupDetails::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.GroupDetails.id)
}
inline ::std::string* GroupDetails::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.GroupDetails.id)
  return id_;
}
inline ::std::string* GroupDetails::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GroupDetails::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.GroupDetails.id)
}

// optional string name = 2;
inline bool GroupDetails::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupDetails::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupDetails::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GroupDetails::name() const {
  // @@protoc_insertion_point(field_get:textsecure.GroupDetails.name)
  return *name_;
}
inline void GroupDetails::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.GroupDetails.name)
}
inline void GroupDetails::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.GroupDetails.name)
}
inline void GroupDetails::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.GroupDetails.name)
}
inline ::std::string* GroupDetails::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.GroupDetails.name)
  return name_;
}
inline ::std::string* GroupDetails::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GroupDetails::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.GroupDetails.name)
}

// repeated string members = 3;
inline int GroupDetails::members_size() const {
  return members_.size();
}
inline void GroupDetails::clear_members() {
  members_.Clear();
}
inline const ::std::string& GroupDetails::members(int index) const {
  // @@protoc_insertion_point(field_get:textsecure.GroupDetails.members)
  return members_.Get(index);
}
inline ::std::string* GroupDetails::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:textsecure.GroupDetails.members)
  return members_.Mutable(index);
}
inline void GroupDetails::set_members(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:textsecure.GroupDetails.members)
  members_.Mutable(index)->assign(value);
}
inline void GroupDetails::set_members(int index, const char* value) {
  members_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.GroupDetails.members)
}
inline void GroupDetails::set_members(int index, const char* value, size_t size) {
  members_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.GroupDetails.members)
}
inline ::std::string* GroupDetails::add_members() {
  return members_.Add();
}
inline void GroupDetails::add_members(const ::std::string& value) {
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:textsecure.GroupDetails.members)
}
inline void GroupDetails::add_members(const char* value) {
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:textsecure.GroupDetails.members)
}
inline void GroupDetails::add_members(const char* value, size_t size) {
  members_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:textsecure.GroupDetails.members)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GroupDetails::members() const {
  // @@protoc_insertion_point(field_list:textsecure.GroupDetails.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GroupDetails::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:textsecure.GroupDetails.members)
  return &members_;
}

// optional .textsecure.Avatar avatar = 4;
inline bool GroupDetails::has_avatar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupDetails::set_has_avatar() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupDetails::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupDetails::clear_avatar() {
  if (avatar_ != NULL) avatar_->::textsecure::Avatar::Clear();
  clear_has_avatar();
}
inline const ::textsecure::Avatar& GroupDetails::avatar() const {
  // @@protoc_insertion_point(field_get:textsecure.GroupDetails.avatar)
  return avatar_ != NULL ? *avatar_ : *default_instance_->avatar_;
}
inline ::textsecure::Avatar* GroupDetails::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == NULL) avatar_ = new ::textsecure::Avatar;
  // @@protoc_insertion_point(field_mutable:textsecure.GroupDetails.avatar)
  return avatar_;
}
inline ::textsecure::Avatar* GroupDetails::release_avatar() {
  clear_has_avatar();
  ::textsecure::Avatar* temp = avatar_;
  avatar_ = NULL;
  return temp;
}
inline void GroupDetails::set_allocated_avatar(::textsecure::Avatar* avatar) {
  delete avatar_;
  avatar_ = avatar;
  if (avatar) {
    set_has_avatar();
  } else {
    clear_has_avatar();
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.GroupDetails.avatar)
}

// optional bool active = 5 [default = true];
inline bool GroupDetails::has_active() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GroupDetails::set_has_active() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GroupDetails::clear_has_active() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GroupDetails::clear_active() {
  active_ = true;
  clear_has_active();
}
inline bool GroupDetails::active() const {
  // @@protoc_insertion_point(field_get:textsecure.GroupDetails.active)
  return active_;
}
inline void GroupDetails::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:textsecure.GroupDetails.active)
}

// -------------------------------------------------------------------

// ContactDetails

// optional string number = 1;
inline bool ContactDetails::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContactDetails::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContactDetails::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContactDetails::clear_number() {
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_->clear();
  }
  clear_has_number();
}
inline const ::std::string& ContactDetails::number() const {
  // @@protoc_insertion_point(field_get:textsecure.ContactDetails.number)
  return *number_;
}
inline void ContactDetails::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.ContactDetails.number)
}
inline void ContactDetails::set_number(const char* value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.ContactDetails.number)
}
inline void ContactDetails::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.ContactDetails.number)
}
inline ::std::string* ContactDetails::mutable_number() {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.ContactDetails.number)
  return number_;
}
inline ::std::string* ContactDetails::release_number() {
  clear_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContactDetails::set_allocated_number(::std::string* number) {
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete number_;
  }
  if (number) {
    set_has_number();
    number_ = number;
  } else {
    clear_has_number();
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.ContactDetails.number)
}

// optional string name = 2;
inline bool ContactDetails::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContactDetails::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContactDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContactDetails::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ContactDetails::name() const {
  // @@protoc_insertion_point(field_get:textsecure.ContactDetails.name)
  return *name_;
}
inline void ContactDetails::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.ContactDetails.name)
}
inline void ContactDetails::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.ContactDetails.name)
}
inline void ContactDetails::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.ContactDetails.name)
}
inline ::std::string* ContactDetails::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.ContactDetails.name)
  return name_;
}
inline ::std::string* ContactDetails::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContactDetails::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.ContactDetails.name)
}

// optional .textsecure.Avatar avatar = 3;
inline bool ContactDetails::has_avatar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContactDetails::set_has_avatar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContactDetails::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContactDetails::clear_avatar() {
  if (avatar_ != NULL) avatar_->::textsecure::Avatar::Clear();
  clear_has_avatar();
}
inline const ::textsecure::Avatar& ContactDetails::avatar() const {
  // @@protoc_insertion_point(field_get:textsecure.ContactDetails.avatar)
  return avatar_ != NULL ? *avatar_ : *default_instance_->avatar_;
}
inline ::textsecure::Avatar* ContactDetails::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == NULL) avatar_ = new ::textsecure::Avatar;
  // @@protoc_insertion_point(field_mutable:textsecure.ContactDetails.avatar)
  return avatar_;
}
inline ::textsecure::Avatar* ContactDetails::release_avatar() {
  clear_has_avatar();
  ::textsecure::Avatar* temp = avatar_;
  avatar_ = NULL;
  return temp;
}
inline void ContactDetails::set_allocated_avatar(::textsecure::Avatar* avatar) {
  delete avatar_;
  avatar_ = avatar;
  if (avatar) {
    set_has_avatar();
  } else {
    clear_has_avatar();
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.ContactDetails.avatar)
}

// optional string color = 4;
inline bool ContactDetails::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContactDetails::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContactDetails::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContactDetails::clear_color() {
  if (color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    color_->clear();
  }
  clear_has_color();
}
inline const ::std::string& ContactDetails::color() const {
  // @@protoc_insertion_point(field_get:textsecure.ContactDetails.color)
  return *color_;
}
inline void ContactDetails::set_color(const ::std::string& value) {
  set_has_color();
  if (color_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    color_ = new ::std::string;
  }
  color_->assign(value);
  // @@protoc_insertion_point(field_set:textsecure.ContactDetails.color)
}
inline void ContactDetails::set_color(const char* value) {
  set_has_color();
  if (color_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    color_ = new ::std::string;
  }
  color_->assign(value);
  // @@protoc_insertion_point(field_set_char:textsecure.ContactDetails.color)
}
inline void ContactDetails::set_color(const char* value, size_t size) {
  set_has_color();
  if (color_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    color_ = new ::std::string;
  }
  color_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:textsecure.ContactDetails.color)
}
inline ::std::string* ContactDetails::mutable_color() {
  set_has_color();
  if (color_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    color_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:textsecure.ContactDetails.color)
  return color_;
}
inline ::std::string* ContactDetails::release_color() {
  clear_has_color();
  if (color_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = color_;
    color_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContactDetails::set_allocated_color(::std::string* color) {
  if (color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete color_;
  }
  if (color) {
    set_has_color();
    color_ = color;
  } else {
    clear_has_color();
    color_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:textsecure.ContactDetails.color)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace textsecure

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::textsecure::Envelope_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::textsecure::Envelope_Type>() {
  return ::textsecure::Envelope_Type_descriptor();
}
template <> struct is_proto_enum< ::textsecure::DataMessage_Flags> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::textsecure::DataMessage_Flags>() {
  return ::textsecure::DataMessage_Flags_descriptor();
}
template <> struct is_proto_enum< ::textsecure::SyncMessage_Request_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::textsecure::SyncMessage_Request_Type>() {
  return ::textsecure::SyncMessage_Request_Type_descriptor();
}
template <> struct is_proto_enum< ::textsecure::GroupContext_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::textsecure::GroupContext_Type>() {
  return ::textsecure::GroupContext_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IncomingPushMessageSignal_2eproto__INCLUDED
